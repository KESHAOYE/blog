import{_ as l,c as i,ag as e,o as r}from"./chunks/framework.BxW8Wou5.js";const c=JSON.parse('{"title":"4、编译、解释程序翻译过程","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/软件设计师/第2章 - 程序设计语言/4.编译、解释翻译过程.md","filePath":"ruankao/软件设计师/第2章 - 程序设计语言/4.编译、解释翻译过程.md","lastUpdated":null}'),t={name:"ruankao/软件设计师/第2章 - 程序设计语言/4.编译、解释翻译过程.md"};function h(o,a,n,d,u,s){return r(),i("div",null,a[0]||(a[0]=[e('<h1 id="_4、编译、解释程序翻译过程" tabindex="-1">4、编译、解释程序翻译过程 <a class="header-anchor" href="#_4、编译、解释程序翻译过程" aria-label="Permalink to &quot;4、编译、解释程序翻译过程&quot;">​</a></h1><p>前面说到了高级语言程序要经过编译或解释程序才能运行</p><ul><li>编译程序和解释程序都不可省略<strong>词法分析、语法分析、语义分析</strong>且顺序不可交换</li><li>编译程序的<strong>中间代码生成、代码优化不是必要的</strong>，可以省略。</li></ul><h2 id="符号表" tabindex="-1">符号表 <a class="header-anchor" href="#符号表" aria-label="Permalink to &quot;符号表&quot;">​</a></h2><ul><li>不断收集、记录和使用源程序中一些相关符号的类型和特征等信息，并将其存入符号表中。</li><li>记录源程序中各个字符的必要信息，以辅助语义的正确性检查和代码生成。</li></ul><h2 id="第一阶段-词法分析-了解" tabindex="-1">第一阶段：词法分析（了解） <a class="header-anchor" href="#第一阶段-词法分析-了解" aria-label="Permalink to &quot;第一阶段：词法分析（了解）&quot;">​</a></h2><h3 id="流程" tabindex="-1">流程 <a class="header-anchor" href="#流程" aria-label="Permalink to &quot;流程&quot;">​</a></h3><ul><li>输入是源程序（看成多行字符串）</li><li>从前到后（从左到右）逐个字符地扫描</li><li>识别出一个个“单词”符号，这是最基本的语法单位</li><li>单词一般由类型（关键字（保留字）、标识符、常数、运算符、分隔符等）和值组成</li><li>输出是一个记号流</li></ul><h3 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h3><p>分析构成程序的字符及由字符按照构造规则构成的符号是否符合程序语言的规定</p><h3 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h3><h4 id="正规式" tabindex="-1">正规式 <a class="header-anchor" href="#正规式" aria-label="Permalink to &quot;正规式&quot;">​</a></h4><p>| 正规式 | 正规集 | | ------ | -------------------------- | --------------------------------- | | Ab | 字符串 ab 构成的集合 | | a | b | 字符串 a、b 构成的集合 | | a* | 由 0 个或多个 a 组成的集合 | | (a | b)* | 所有字符 a 和 b 构成的串的集合 | | a(a | b)* | 以 a 为首字符的 a、b 字符串的集合 | | (a | b)*abb | 以 aab 为结尾的 a、b 字符串的集合 |</p><h4 id="有限自动机" tabindex="-1">有限自动机 <a class="header-anchor" href="#有限自动机" aria-label="Permalink to &quot;有限自动机&quot;">​</a></h4><p>它能正确地识别正规集</p><ul><li><p>确定的有限自动机（DFA）：对每个状态来说识别字符后转移的状态是唯一的</p></li><li><p>不确定的有限自动机（NFA）：对每个状态来说识别字符后转移的状态是不唯一的</p></li><li><p>要在终态结束</p></li><li><p>初态和终态可以重合</p></li></ul><h2 id="第二阶段-语法分析-爱考" tabindex="-1">第二阶段：语法分析（爱考） <a class="header-anchor" href="#第二阶段-语法分析-爱考" aria-label="Permalink to &quot;第二阶段：语法分析（爱考）&quot;">​</a></h2><h3 id="流程-1" tabindex="-1">流程 <a class="header-anchor" href="#流程-1" aria-label="Permalink to &quot;流程&quot;">​</a></h3><ul><li>输入是词法分析的记号流</li><li>输出是语法树（分析树）</li></ul><h3 id="作用-1" tabindex="-1">作用 <a class="header-anchor" href="#作用-1" aria-label="Permalink to &quot;作用&quot;">​</a></h3><ul><li>对各条语句的结构进行合法性分析</li><li>分析程序中的句子结构是否正确</li><li>语法分析阶段可以发现所有语法错误</li></ul><h3 id="语法规则" tabindex="-1">语法规则 <a class="header-anchor" href="#语法规则" aria-label="Permalink to &quot;语法规则&quot;">​</a></h3><h4 id="上下文无关文法" tabindex="-1">上下文无关文法 <a class="header-anchor" href="#上下文无关文法" aria-label="Permalink to &quot;上下文无关文法&quot;">​</a></h4><p>被广泛地用于表示各种程序设计语言的语法规则。</p><p>开始符号 -&gt; A ｜ B（不能继续推就是终结符号）</p><h2 id="语义分析" tabindex="-1">语义分析 <a class="header-anchor" href="#语义分析" aria-label="Permalink to &quot;语义分析&quot;">​</a></h2><h3 id="流程-2" tabindex="-1">流程 <a class="header-anchor" href="#流程-2" aria-label="Permalink to &quot;流程&quot;">​</a></h3><ul><li>输入是语法分析的语法树</li></ul><h3 id="作用及注意事项" tabindex="-1">作用及注意事项 <a class="header-anchor" href="#作用及注意事项" aria-label="Permalink to &quot;作用及注意事项&quot;">​</a></h3><ul><li>语义分析是进行类型分析和检查</li><li>语义分析阶段不能发现程序中所有的语义错误</li><li>语义分析阶段可以发现静态语义错误</li><li>不能发现动态语义错误，动态需要运行时发现</li></ul><h3 id="动态的语义错误" tabindex="-1">动态的语义错误 <a class="header-anchor" href="#动态的语义错误" aria-label="Permalink to &quot;动态的语义错误&quot;">​</a></h3><ul><li>除数为零</li><li>死循环</li><li>....</li></ul><h2 id="中间代码生成" tabindex="-1">中间代码生成 <a class="header-anchor" href="#中间代码生成" aria-label="Permalink to &quot;中间代码生成&quot;">​</a></h2><h3 id="常见" tabindex="-1">常见 <a class="header-anchor" href="#常见" aria-label="Permalink to &quot;常见&quot;">​</a></h3><ul><li>后缀式</li><li>三地址码</li><li>三元式</li><li>四元式</li><li>树（图）</li></ul><h3 id="后缀式-逆波兰式" tabindex="-1">后缀式（逆波兰式） <a class="header-anchor" href="#后缀式-逆波兰式" aria-label="Permalink to &quot;后缀式（逆波兰式）&quot;">​</a></h3><p>把运算符放到后面（ab？）,而中缀式是（a？b）</p><h4 id="后缀转中缀" tabindex="-1">后缀转中缀 <a class="header-anchor" href="#后缀转中缀" aria-label="Permalink to &quot;后缀转中缀&quot;">​</a></h4><ul><li>优先级最高的是括号，其次是乘除，最后是加减</li><li>逻辑表达式中优先级最高的是括号，其次是大小符号，然后是逻辑与，最后是逻辑或</li><li>优先级相同从右向左</li></ul><h4 id="中缀转后缀" tabindex="-1">中缀转后缀 <a class="header-anchor" href="#中缀转后缀" aria-label="Permalink to &quot;中缀转后缀&quot;">​</a></h4><ul><li>从左向右依次入栈，遇到符号取出栈顶数为 b，符号为？，栈次顶数为 a</li></ul><h4 id="二叉-语法-树的遍历" tabindex="-1">二叉（语法）树的遍历 <a class="header-anchor" href="#二叉-语法-树的遍历" aria-label="Permalink to &quot;二叉（语法）树的遍历&quot;">​</a></h4><ul><li>中序遍历（左中右）：中缀式</li><li>后序遍历（左右中）：后缀式</li></ul><h3 id="特征" tabindex="-1">特征 <a class="header-anchor" href="#特征" aria-label="Permalink to &quot;特征&quot;">​</a></h3><ul><li>与具体机器无关，有利于进行与机器无关的优化处理和提高编译程序的可移植性</li><li>将不同的高级语言翻译成同一种中间代码，可以跨平台</li><li>最常用的中间代码是与汇编指令相似的三地址码</li></ul><h2 id="代码优化" tabindex="-1">代码优化 <a class="header-anchor" href="#代码优化" aria-label="Permalink to &quot;代码优化&quot;">​</a></h2><h2 id="最后一个阶段-目标代码生成-了解即可" tabindex="-1">最后一个阶段：目标代码生成（了解即可） <a class="header-anchor" href="#最后一个阶段-目标代码生成-了解即可" aria-label="Permalink to &quot;最后一个阶段：目标代码生成（了解即可）&quot;">​</a></h2><ul><li>与具体的机器密切相关</li><li>寄存器的分配属于此阶段</li></ul>',48)]))}const q=l(t,[["render",h]]);export{c as __pageData,q as default};
