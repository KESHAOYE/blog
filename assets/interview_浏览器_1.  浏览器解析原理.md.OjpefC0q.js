import{_ as o,a as e}from"./chunks/浏览器渲染原理-transform.DaZE-p0g.js";import{_ as r,c as t,ag as l,o as s}from"./chunks/framework.BxW8Wou5.js";const f=JSON.parse('{"title":"1. 浏览器解析原理（从地址栏输入URL到网页显示发生了什么？ - 除网络部分）、重排（reflow）、重绘（repaint）、为什么transform效率高","description":"","frontmatter":{},"headers":[],"relativePath":"interview/浏览器/1.  浏览器解析原理.md","filePath":"interview/浏览器/1.  浏览器解析原理.md","lastUpdated":1705938767000}'),n={name:"interview/浏览器/1.  浏览器解析原理.md"};function c(i,a,d,h,p,u){return s(),t("div",null,a[0]||(a[0]=[l('<h1 id="_1-浏览器解析原理-从地址栏输入url到网页显示发生了什么-除网络部分-、重排-reflow-、重绘-repaint-、为什么transform效率高" tabindex="-1">1. 浏览器解析原理（从地址栏输入URL到网页显示发生了什么？ - 除网络部分）、重排（reflow）、重绘（repaint）、为什么transform效率高 <a class="header-anchor" href="#_1-浏览器解析原理-从地址栏输入url到网页显示发生了什么-除网络部分-、重排-reflow-、重绘-repaint-、为什么transform效率高" aria-label="Permalink to &quot;1. 浏览器解析原理（从地址栏输入URL到网页显示发生了什么？ - 除网络部分）、重排（reflow）、重绘（repaint）、为什么transform效率高&quot;">​</a></h1><blockquote><p>浏览器的网络线程收到HTML文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</p></blockquote><h2 id="解析html-css-js" tabindex="-1">解析HTML/CSS/JS <a class="header-anchor" href="#解析html-css-js" aria-label="Permalink to &quot;解析HTML/CSS/JS&quot;">​</a></h2><p>浏览器会将HTML代码转换为对应的<strong>DOM树（document object model）</strong>，将样式表（浏览器样式、内部、外部样式）转换为<strong>cssom树（css object model）</strong></p><h3 id="解析html过程中遇到css代码怎么办" tabindex="-1">解析HTML过程中遇到CSS代码怎么办？ <a class="header-anchor" href="#解析html过程中遇到css代码怎么办" aria-label="Permalink to &quot;解析HTML过程中遇到CSS代码怎么办？&quot;">​</a></h3><p>为了提高解析效率，浏览器会启动一个预解析器（线程）率先下载和解析CSS</p><img src="'+o+'"><p><strong>CSS代码不会阻塞HTML的解析（因为跑在不同的线程 - 预解析线程）</strong></p><p>解析过程中遇到CSS解析CSS，遇到JS执行JS。为了提高解析效率，浏览器在开始解析前，会启动一个<strong>预解析线程</strong>，率先下载HTML中的外部CSS文件和外部的JS文件</p><blockquote><p>如果主线程解析到<code>link</code>位置，此时外部的CSS文件还没有下载解析好，主线程不会等待，继续解析后续的HTML。这是因为下载和解析CSS的工作是在预解析线程中进行的。<strong>这就是CSS不会阻塞HTML解析的根本原因。</strong></p></blockquote><h3 id="解析过程中遇到js" tabindex="-1">解析过程中遇到JS <a class="header-anchor" href="#解析过程中遇到js" aria-label="Permalink to &quot;解析过程中遇到JS&quot;">​</a></h3><blockquote><p>如果主线程解析到<code>script</code>位置，会停止HTML解析，转而等待JS文件下载好，并将全局代码解析执行完成后，才能继续解析HTML。这是因为JS代码的执行过程可能会修改当前的DOM树，所以DOM树的生成必须暂停，这就是JS会阻塞HTML解析的根本原因</p></blockquote><h2 id="样式计算" tabindex="-1">样式计算 <a class="header-anchor" href="#样式计算" aria-label="Permalink to &quot;样式计算&quot;">​</a></h2><blockquote><p>主线程会遍历得到的DOM树，依次为树中的每个节点计算出它最终的样式（Computed Style）。在这一过程中，很多预设值会变成绝对值，比如<code>red</code>会变成<code>rgb(255,0,0)</code>; 相对单位会变成绝对单位，比如<code>em</code>会变成<code>px</code>。 这一步完成后会得到一颗带有样式的DOM树</p></blockquote><p><a href="./../../frontend-basic/css/css属性值的计算过程.html">可参考CSS属性值计算过程</a><br><a href="./../../frontend-basic/css/css层叠与继承.html">可参考CSS的层叠与继承</a></p><h2 id="布局" tabindex="-1">布局 <a class="header-anchor" href="#布局" aria-label="Permalink to &quot;布局&quot;">​</a></h2><blockquote><p>布局阶段会依次遍历dom树的每一个节点，计算每个节点的几何信息。例如节点的高度、包含块的位置等。 大部分时候，<strong>DOM树和布局树并非一一对应</strong> 比如<code>display:none</code>的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然DOM树种不存在这些伪元素节点，但他们拥有几何信息，所以会生成到布局树种。还有匿名行盒，匿名块盒等都会导致DOM树和布局树无法一一对应。 <strong>布局完成后会得到布局树</strong></p></blockquote><p><a href="./../../frontend-basic/css/css视觉格式化模型.html">可参考CSS视觉格式化模型</a></p><h2 id="分层-新浏览器才有" tabindex="-1">分层（新浏览器才有） <a class="header-anchor" href="#分层-新浏览器才有" aria-label="Permalink to &quot;分层（新浏览器才有）&quot;">​</a></h2><blockquote><p>主线程会使用一套复杂的策略对整个布局树中进行分层。 分层的好处在于，将来某一个层改变以后，仅会对该层进行后续处理，从而提升效率 滚动条、堆叠上下文、transform、opacity等样式都会或多或少的影响分层结果，也可以通过<code>will-change</code>属性更大程度的影响分层结果。</p></blockquote><h2 id="绘制-生成绘制指令" tabindex="-1">绘制（生成绘制指令） <a class="header-anchor" href="#绘制-生成绘制指令" aria-label="Permalink to &quot;绘制（生成绘制指令）&quot;">​</a></h2><blockquote><p>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</p></blockquote><h2 id="分块" tabindex="-1">分块 <a class="header-anchor" href="#分块" aria-label="Permalink to &quot;分块&quot;">​</a></h2><blockquote><p>主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。 合成线程首先对每个图层进行分块，将其划分为更多的小区域。 他会从线程池中拿取多个线程来完成分块工作。</p></blockquote><h2 id="光栅化" tabindex="-1">光栅化 <a class="header-anchor" href="#光栅化" aria-label="Permalink to &quot;光栅化&quot;">​</a></h2><blockquote><p>合成线程会将块信息交给GPU进程，以极高的速度完成光栅化。 GPU进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。 光栅化的结果，就是一块一块的位图。</p></blockquote><h2 id="画" tabindex="-1">画 <a class="header-anchor" href="#画" aria-label="Permalink to &quot;画&quot;">​</a></h2><blockquote><p>合成线程拿到每个层、每个块的位图后，生成一个个【指引（quad）】信息 指引会标识出每个位图应该滑倒屏幕的哪个位置，以及考虑到旋转、缩放等变形。 <strong>变形发生在合成线程，与渲染主线程无关，这就是<code>transform</code>效率高的本质原因</strong> 合成线程会把quad提交给GPU进程，由GPU进程产生系统调用，提交给GPU硬件，完成最终的屏幕成像。</p></blockquote><h2 id="什么是reflow-重排" tabindex="-1">什么是reflow（重排） <a class="header-anchor" href="#什么是reflow-重排" aria-label="Permalink to &quot;什么是reflow（重排）&quot;">​</a></h2><blockquote><p>reflow的本质就是重新计算layout树 当进行了影响布局树（<strong>更改几何信息</strong>）的操作后，需要重新计算布局树，会引发layout 为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当JS代码全部完成后在进行统一计算。所以，改动属性造成的reflow是异步完成的 也同样因为如此，当JS获取布局属性时，就可能造成无法获取到最新的布局信息 浏览器在权衡下，最终决定获取属性立即reflow</p></blockquote><h2 id="什么是repaint-重绘" tabindex="-1">什么是repaint（重绘） <a class="header-anchor" href="#什么是repaint-重绘" aria-label="Permalink to &quot;什么是repaint（重绘）&quot;">​</a></h2><blockquote><p>repaint的本质就是重新更根据分层信息计算绘制指令 当改动了可见样式后，就需要重新计算，会引发repaint 由于元素的布局信息也属于可见样式，所以reflow一定会引起repaint</p></blockquote><h2 id="为什么transform效率高" tabindex="-1">为什么<code>transform</code>效率高 <a class="header-anchor" href="#为什么transform效率高" aria-label="Permalink to &quot;为什么```transform```效率高&quot;">​</a></h2><br><img src="'+e+'"> --- <blockquote><p>因为transform既不会影响布局也不会影响绘制指令，他影响的只是渲染流程的最后一个[draw]阶段 由于draw阶段在合成线程中，所以transform的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响transform的变化。</p></blockquote>',37)]))}const q=r(n,[["render",c]]);export{f as __pageData,q as default};
