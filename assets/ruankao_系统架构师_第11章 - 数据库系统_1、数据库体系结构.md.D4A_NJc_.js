import{_ as l,c as e,ag as i,o as r}from"./chunks/framework.BxW8Wou5.js";const t="/blog/picture/%E8%BD%AF%E8%80%83/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%BC%8F.png",o="/blog/picture/%E8%BD%AF%E8%80%83/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84.png",p=JSON.parse('{"title":"1、数据库体系结构","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/系统架构师/第11章 - 数据库系统/1、数据库体系结构.md","filePath":"ruankao/系统架构师/第11章 - 数据库系统/1、数据库体系结构.md","lastUpdated":1748002092000}'),h={name:"ruankao/系统架构师/第11章 - 数据库系统/1、数据库体系结构.md"};function n(d,a,s,u,c,b){return r(),e("div",null,a[0]||(a[0]=[i('<h1 id="_1、数据库体系结构" tabindex="-1">1、数据库体系结构 <a class="header-anchor" href="#_1、数据库体系结构" aria-label="Permalink to &quot;1、数据库体系结构&quot;">​</a></h1><h2 id="数据库模式" tabindex="-1">数据库模式 <a class="header-anchor" href="#数据库模式" aria-label="Permalink to &quot;数据库模式&quot;">​</a></h2><img src="'+t+'"><h3 id="三级模式" tabindex="-1">三级模式 <a class="header-anchor" href="#三级模式" aria-label="Permalink to &quot;三级模式&quot;">​</a></h3><h4 id="外模式" tabindex="-1">外模式 <a class="header-anchor" href="#外模式" aria-label="Permalink to &quot;外模式&quot;">​</a></h4><p>对应用户视图，只与用户相关 针对用户和程序员</p><h4 id="概念模式" tabindex="-1">概念模式 <a class="header-anchor" href="#概念模式" aria-label="Permalink to &quot;概念模式&quot;">​</a></h4><p>简称为模式，是数据库的逻辑部分，也成为逻辑模式，是整个数据库的核心 对应的是基本表 外模式的数据来源就是概念模式，所以有外模式-概念模式隐射</p><h4 id="内模式" tabindex="-1">内模式 <a class="header-anchor" href="#内模式" aria-label="Permalink to &quot;内模式&quot;">​</a></h4><p>物理计算机（物理存储），与存储文件相关 存在概念模式-内模式映射关系</p><h3 id="两级映射模式" tabindex="-1">两级映射模式 <a class="header-anchor" href="#两级映射模式" aria-label="Permalink to &quot;两级映射模式&quot;">​</a></h3><ul><li>外模式-概念模式映射：保持数据逻辑独立性（外部应用程序和逻辑基本表是相互独立的）</li><li>概念模式-内模式映射：保持物理独立性（应用程序与内模式是相互独立的）</li></ul><h2 id="关系表" tabindex="-1">关系表 <a class="header-anchor" href="#关系表" aria-label="Permalink to &quot;关系表&quot;">​</a></h2><h3 id="_3-种类型" tabindex="-1">3 种类型 <a class="header-anchor" href="#_3-种类型" aria-label="Permalink to &quot;3 种类型&quot;">​</a></h3><ul><li>基本关系（基本表或基表）：实际存在的表，实际存储数据的逻辑表示</li><li>查询表：查询结果对应的表</li><li>视图表：由基表或其他视图表导出的表，本身不独立存储，数据库只存放它的定义，常称为虚表</li></ul><h2 id="数据库视图" tabindex="-1">数据库视图 <a class="header-anchor" href="#数据库视图" aria-label="Permalink to &quot;数据库视图&quot;">​</a></h2><p>他是一个虚拟表，内容由查询定义（仅保存 SQL 查询语句）,同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并没有真正存储这些数据，而是通过查询原始表动态生成所需要的数据</p><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>简化用户操作（一般都是多表查询）</li><li>使用户能以多种角度看待同一数据</li><li>对重构数据库提供了一定程度的逻辑独立性</li><li>可以对机密数据提供安全保护</li></ul><h3 id="物化视图" tabindex="-1">物化视图 <a class="header-anchor" href="#物化视图" aria-label="Permalink to &quot;物化视图&quot;">​</a></h3><p>不是传统意义上的虚拟视图，是实体化视图，其本身会存储数据。同时当原始表中的数据更新时，物化视图也会更新</p><h2 id="分布式数据库" tabindex="-1">分布式数据库 <a class="header-anchor" href="#分布式数据库" aria-label="Permalink to &quot;分布式数据库&quot;">​</a></h2><p>对应集中式数据库，集中式数据库将数据放在一台机器上</p><p>分布式将数据库放在多个不同的物理节点</p><img src="'+o+'"><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li>数据独立性：除了数据的逻辑独立性和物理独立性外，还有数据分布独立性（分布透明性）</li><li>集中与自治共享结合的控制结构：各局部 DBMS 可以独立的管理局部数据库，具有自治的功能。同时，系统又设有集中控制机制，协调各局部 DBMS 的工作，执行全局应用。</li><li>适当增加数据冗余度：在不同的场地存储同一数据的多个副本，可以提高系统的可靠性和可用性，同时也能提高系统性能（提高系统的可用性即当某个节点发生故障，数据仍然可用，保证数据的完备性）</li><li>全局的一致性、可串行性和可恢复性</li></ul><h3 id="模式" tabindex="-1">模式 <a class="header-anchor" href="#模式" aria-label="Permalink to &quot;模式&quot;">​</a></h3><ul><li>全局外模式</li><li>全局概念模式：定义了整体的逻辑结构</li><li>分片模式：体现数据如何切割</li><li>分布模式：体现数据如何放置</li><li>局部概念模式</li><li>局部内模式</li></ul><h3 id="组成" tabindex="-1">组成 <a class="header-anchor" href="#组成" aria-label="Permalink to &quot;组成&quot;">​</a></h3><ul><li>LDBMS 局部数据库管理系统</li><li>GDBMS 全局数据库管理系统</li><li>全局数据字典</li><li>通信管理 CM</li></ul><h3 id="结构" tabindex="-1">结构 <a class="header-anchor" href="#结构" aria-label="Permalink to &quot;结构&quot;">​</a></h3><ul><li>全局控制集中的 DDBMS</li><li>全局控制分散的 DDBMS</li><li>全局控制部分分散的 DDBMS</li></ul><h3 id="分布透明性" tabindex="-1">分布透明性 <a class="header-anchor" href="#分布透明性" aria-label="Permalink to &quot;分布透明性&quot;">​</a></h3><h4 id="分片透明性" tabindex="-1">分片透明性 <a class="header-anchor" href="#分片透明性" aria-label="Permalink to &quot;分片透明性&quot;">​</a></h4><p>用户不必关心数据是如何分片的，它们对数据的操作在全局关系上进行，即如何分片对用户是透明的</p><p>方向： 水平分片（元组分片 例如地区）、垂直分片（属性列）、混合分片（水平垂直一起分片）</p><h4 id="复制透明性" tabindex="-1">复制透明性 <a class="header-anchor" href="#复制透明性" aria-label="Permalink to &quot;复制透明性&quot;">​</a></h4><p>用户不必关心数据库在网络中各个节点的复制情况，被复制的数据的更新都由系统自动完成</p><h4 id="位置透明性" tabindex="-1">位置透明性 <a class="header-anchor" href="#位置透明性" aria-label="Permalink to &quot;位置透明性&quot;">​</a></h4><p>用户不必知道所操作的数据放在何处，即数据分配到哪个或哪些站点存储对用户是透明的</p><h4 id="局部映像透明性-逻辑透明" tabindex="-1">局部映像透明性（逻辑透明） <a class="header-anchor" href="#局部映像透明性-逻辑透明" aria-label="Permalink to &quot;局部映像透明性（逻辑透明）&quot;">​</a></h4><p>是最低层次的透明性，该透明性提供数据到局部数据库的映像，即用户不必关心局部 DBMS 支持哪种数据模型、使用哪种数据操纵语言，数据模型和操纵语言的转换是由系统完成的。因此，局部映像透明性对异构型和同构型质的分布式数据库系统是非常重要的</p>',43)]))}const _=l(h,[["render",n]]);export{p as __pageData,_ as default};
