import{_ as l,c as i,ag as r,o as e}from"./chunks/framework.BxW8Wou5.js";const p=JSON.parse('{"title":"1、计算机系统组成","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/系统架构师/第8章 - 计算机基础知识/1、计算机系统组成/1、计算机系统组成.md","filePath":"ruankao/系统架构师/第8章 - 计算机基础知识/1、计算机系统组成/1、计算机系统组成.md","lastUpdated":1748002092000}'),t={name:"ruankao/系统架构师/第8章 - 计算机基础知识/1、计算机系统组成/1、计算机系统组成.md"};function o(n,a,s,h,u,d){return e(),i("div",null,a[0]||(a[0]=[r('<h1 id="_1、计算机系统组成" tabindex="-1">1、计算机系统组成 <a class="header-anchor" href="#_1、计算机系统组成" aria-label="Permalink to &quot;1、计算机系统组成&quot;">​</a></h1><h2 id="硬件" tabindex="-1">硬件 <a class="header-anchor" href="#硬件" aria-label="Permalink to &quot;硬件&quot;">​</a></h2><ul><li>处理器（CPU） <ul><li>运算器</li><li>控制器</li></ul></li><li>存储器 <ul><li>主存储器</li><li>外（辅助）存储器：硬盘（属于外设）</li></ul></li><li>总线：连接不同内部设备 <ul><li>数据总线：传输数据</li><li>控制总线：传输控制信息</li></ul></li><li>接口</li><li>外部设备</li><li>...</li></ul><h3 id="存储器" tabindex="-1">存储器 <a class="header-anchor" href="#存储器" aria-label="Permalink to &quot;存储器&quot;">​</a></h3><ul><li><p>CPU 中的寄存器存储比特（bit）大小的数据</p></li><li><p>Cache（按内容存取 - 相联存储器）</p></li><li><p>内存（主存、DRAM）</p></li><li><p>外存（辅存）：硬盘、光盘、U 盘</p></li></ul><p>大量数据存在外存，运行时从外存加载到内存，再由 CPU 进行存取</p><p><strong>时间局部性</strong>：程序中的某条指令一旦执行，不久以后该指令可能再次执行，典型原因是由于程序中存在着大量的<strong>循环操作</strong></p><p><strong>空间局限性</strong>：一旦程序访问了某个存储单元，不久以后，其附近的存储单元也将被访问，即程序再一段时间内所访问的地址可能集中在一定的范围内，其典型情况是程序<strong>顺序执行</strong></p><p><strong>分级存储的目的是</strong>：解决存储的容量、价格和速度之间的矛盾</p><h3 id="总线" tabindex="-1">总线 <a class="header-anchor" href="#总线" aria-label="Permalink to &quot;总线&quot;">​</a></h3><p>各种设备之间使用总线进行连接</p><h4 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h4><p>总线是一组能为多个部件<strong>分时共享</strong>的信息传送线，用来连接多个部件并为之提供信息交换通路【总线通常是半双工的】</p><ul><li>单工：传输时这条线路只能单向接受或只能发送（网络）</li><li>半双工</li><li>全双工：某条线路上可以同时接受或发送（打电话）</li></ul><h4 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h4><ul><li>挂接在总线上的多个部件只能分时向总线发送数据，但可同时从总线接受数据（类似对讲机）</li><li>通过总线复用方式可以减少总线中信号线的数量，以较少的信号线传输更多的信息</li></ul><h4 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;分类&quot;">​</a></h4><ul><li>芯片内总线：用于集成电路芯片内部各部分的连接元件级总线。用于一块电路板内各元器件的连接。</li><li>系统总线（内总线）：用于计算机各组成部分（CPU、内存和接口等）的连接</li><li>外总线（通信总线）：用于计算机与外设或计算机与计算机之间的连接或通信</li></ul><p><strong>功能上分为地址总线、数据总线和控制总线</strong></p><p><strong>数据传输方式将总线分为并行总线和串行总线</strong></p><ul><li>并行总线：将数据字节的各位用多条数据线同时进行传送【短距离】</li><li>串行总线：数据是一位一位地进行传输的，在传输中每一位数据都占据一个固定的时间长度。【长距离，传输波特率可以调整，正确性依赖于校验码，数据传输方式可以使用多种】</li></ul><h3 id="数据传输控制方式" tabindex="-1">数据传输控制方式 <a class="header-anchor" href="#数据传输控制方式" aria-label="Permalink to &quot;数据传输控制方式&quot;">​</a></h3><ul><li><p>程序控制（查询）方式：分为无条件传送和程序查询两种方式。方法简单，硬件开销小，但 I/O 能力不高，严重影响 CPU 的利用率（CPU 不断查询 IO 进度，等待 IO 完成才继续，这个阶段 CPU 不能干别的活）</p></li><li><p>程序中断方式：与程序控制方式相比，中断方式因为 CPU 无需等待而提高了传输请求的响应速度【CPU 和 IO 传输可以并行】</p></li><li><p>DMA（直接存储器访问） 方式：DMA 方式是为了在主存和外设之间实现高速、批量数据交换而设置的。DMA 方式比程序控制方式和中断方式都高效【CPU 和 IO 传输可并行】</p></li><li><p>通道方式</p></li><li><p>IO 处理机</p></li></ul><h3 id="处理器体系结构" tabindex="-1">处理器体系结构 <a class="header-anchor" href="#处理器体系结构" aria-label="Permalink to &quot;处理器体系结构&quot;">​</a></h3><h4 id="冯诺依曼结构" tabindex="-1">冯诺依曼结构 <a class="header-anchor" href="#冯诺依曼结构" aria-label="Permalink to &quot;冯诺依曼结构&quot;">​</a></h4><p>指令和数据存储器<strong>合并</strong>在一起。指令和数据都通过<strong>相同的数据总线</strong>传输</p><p>目前的 I3、5、7 都是这种结构</p><h4 id="哈佛结构" tabindex="-1">哈佛结构 <a class="header-anchor" href="#哈佛结构" aria-label="Permalink to &quot;哈佛结构&quot;">​</a></h4><p>指令和数据存储器<strong>分开</strong>存储，可以并行读取，有<strong>较高的数据吞吐率</strong>。 有指令和数据的<strong>数据总线、地址总线</strong></p><p>一般用于嵌入式系统处理器，DSP 属于哈佛结构</p><h3 id="cisc-复杂指令集-和-risc-精简指令集" tabindex="-1">CISC（复杂指令集）和 RISC（精简指令集） <a class="header-anchor" href="#cisc-复杂指令集-和-risc-精简指令集" aria-label="Permalink to &quot;CISC（复杂指令集）和 RISC（精简指令集）&quot;">​</a></h3><h4 id="cisc" tabindex="-1">CISC <a class="header-anchor" href="#cisc" aria-label="Permalink to &quot;CISC&quot;">​</a></h4><p>复杂指令集，数量多，支持多种寻址方式，采用<strong>微程序</strong>控制技术（微码）</p><h4 id="risc" tabindex="-1">RISC <a class="header-anchor" href="#risc" aria-label="Permalink to &quot;RISC&quot;">​</a></h4><p>精简指令集，数量少，支持的寻址方式少，增加了通用寄存器，<strong>硬布线逻辑</strong>控制为主；适合采用流水线</p><h2 id="软件" tabindex="-1">软件 <a class="header-anchor" href="#软件" aria-label="Permalink to &quot;软件&quot;">​</a></h2><h3 id="系统软件" tabindex="-1">系统软件 <a class="header-anchor" href="#系统软件" aria-label="Permalink to &quot;系统软件&quot;">​</a></h3><ul><li>操作系统</li><li>编译工具</li></ul><h3 id="应用软件" tabindex="-1">应用软件 <a class="header-anchor" href="#应用软件" aria-label="Permalink to &quot;应用软件&quot;">​</a></h3><ul><li>办公软件</li><li>娱乐软件</li><li>信息系统软件</li></ul>',40)]))}const b=l(t,[["render",o]]);export{p as __pageData,b as default};
