import{_ as l,c as e,ag as r,o as i}from"./chunks/framework.BxW8Wou5.js";const t="/blog/picture/%E8%BD%AF%E8%80%83/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E7%AD%96%E7%95%A5.png",b=JSON.parse('{"title":"6、软件测试","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/系统架构师/第三章 - 软件工程/6.软件测试.md","filePath":"ruankao/系统架构师/第三章 - 软件工程/6.软件测试.md","lastUpdated":null}'),o={name:"ruankao/系统架构师/第三章 - 软件工程/6.软件测试.md"};function h(n,a,s,d,u,c){return i(),e("div",null,a[0]||(a[0]=[r('<h1 id="_6、软件测试" tabindex="-1">6、软件测试 <a class="header-anchor" href="#_6、软件测试" aria-label="Permalink to &quot;6、软件测试&quot;">​</a></h1><h2 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;分类&quot;">​</a></h2><h3 id="动态测试-需要依赖计算机运行" tabindex="-1">动态测试（需要依赖计算机运行） <a class="header-anchor" href="#动态测试-需要依赖计算机运行" aria-label="Permalink to &quot;动态测试（需要依赖计算机运行）&quot;">​</a></h3><h4 id="白盒测试【结构测试】" tabindex="-1">白盒测试【结构测试】 <a class="header-anchor" href="#白盒测试【结构测试】" aria-label="Permalink to &quot;白盒测试【结构测试】&quot;">​</a></h4><p>关注内部结构与逻辑</p><p><strong>主要用于单元测试阶段</strong></p><ul><li><strong>控制流测试【逻辑覆盖测试（语句覆盖最弱、路径覆盖最强）】</strong></li><li>数据流测试</li><li>程序变异测试</li></ul><h4 id="黑盒测试【功能测试】" tabindex="-1">黑盒测试【功能测试】 <a class="header-anchor" href="#黑盒测试【功能测试】" aria-label="Permalink to &quot;黑盒测试【功能测试】&quot;">​</a></h4><p>关注输入输出及功能</p><p><strong>主要用于集成测试、确认测试和系统测试阶段</strong></p><ul><li>等价类划分：不同等价类，揭示不同问题；有效等价类/无效等价类</li><li>边界值分析：1&lt;=x&lt;=10,可取 x 的值为 0、1、10 和 11 作为测试数据</li><li>错误推测：依靠测试人员的经验和直觉</li><li>判定表：最适合描述在<strong>多个逻辑条件取值的组合所构成的复杂情况下</strong>，分别要执行那些不同的动作</li><li>因果图：根据<strong>输入条件与输出结果之间的因果关系</strong>来设计测试用例</li></ul><hr><ul><li>灰盒测试：介于白盒测试和黑盒测试之间</li><li>自动化测试：先写脚本 -&gt; 自动化执行【不适合项目周期短，需求频繁变动】</li></ul><h3 id="静态测试-人工监测和计算机辅助分析" tabindex="-1">静态测试（人工监测和计算机辅助分析） <a class="header-anchor" href="#静态测试-人工监测和计算机辅助分析" aria-label="Permalink to &quot;静态测试（人工监测和计算机辅助分析）&quot;">​</a></h3><ul><li>桌前检查</li><li>代码审查</li><li>代码走查</li></ul><p><strong>都是【静态分析】</strong></p><h4 id="静态分析" tabindex="-1">静态分析 <a class="header-anchor" href="#静态分析" aria-label="Permalink to &quot;静态分析&quot;">​</a></h4><ul><li>控制流分析：是否存在没有使用的语句 / 无法到达的语句 / 调用并不存在的子程序</li><li>数据流分析：引用未定义的变量 / 对以前未使用的变量再次赋值</li><li>接口分析：模块之间接口的一致性 / 子程序和函数之间的接口一致性 / 函数形参与实参的数量、顺序、类型的一致性</li><li>表达式分析：括号不配对 / 数组引用越界 / 除数为零</li></ul><h2 id="阶段" tabindex="-1">阶段 <a class="header-anchor" href="#阶段" aria-label="Permalink to &quot;阶段&quot;">​</a></h2><p>先从局部 再到整体</p><h3 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h3><p>依据【详细设计】</p><p>模块测试、模块功能、性能、接口等</p><h3 id="集成测试" tabindex="-1">集成测试 <a class="header-anchor" href="#集成测试" aria-label="Permalink to &quot;集成测试&quot;">​</a></h3><p>依据【概要设计】</p><p>模块间接口</p><h4 id="策略" tabindex="-1">策略 <a class="header-anchor" href="#策略" aria-label="Permalink to &quot;策略&quot;">​</a></h4><img src="'+t+'"><h3 id="系统测试" tabindex="-1">系统测试 <a class="header-anchor" href="#系统测试" aria-label="Permalink to &quot;系统测试&quot;">​</a></h3><p>依据【需求文档】</p><p>包括功能测试、性能测试、确认（验收）测试、压力测试等</p><h4 id="性能测试" tabindex="-1">性能测试 <a class="header-anchor" href="#性能测试" aria-label="Permalink to &quot;性能测试&quot;">​</a></h4><ul><li>负载测试：<strong>各种工作负载</strong>下系统的性能</li><li>压力测试【测上限】：系统的瓶颈或不能接受的性能点</li><li>强度测试【测下限】：系统<strong>资源特别低</strong>的情况下运行</li><li>容量测试【并发测试】：同时在线的最大用户数</li><li>可靠性测试：MTTF 之类的参数</li></ul><h4 id="确认-验收-测试" tabindex="-1">确认（验收）测试 <a class="header-anchor" href="#确认-验收-测试" aria-label="Permalink to &quot;确认（验收）测试&quot;">​</a></h4><p>依据【需求文档】，验证软件与需求的一致性。</p><p>内部确认测试、Alpha 测试、Beta 测试、验收测试</p><h3 id="其他测试" tabindex="-1">其他测试 <a class="header-anchor" href="#其他测试" aria-label="Permalink to &quot;其他测试&quot;">​</a></h3><h4 id="ab-测试" tabindex="-1">AB 测试 <a class="header-anchor" href="#ab-测试" aria-label="Permalink to &quot;AB 测试&quot;">​</a></h4><p><strong>多版本同时使用</strong>,利于收集各版本的用户反馈，评估出最好版本。也算是一种【网页优化方法】</p><h4 id="web-测试" tabindex="-1">Web 测试 <a class="header-anchor" href="#web-测试" aria-label="Permalink to &quot;Web 测试&quot;">​</a></h4><p>Web 系统测试与其他系统测试内容基本相同，只是测试重点不同 Web 代码测试包括：源代码规则分析、链接测试、框架测试、表格测试、图形测试等方面</p><h4 id="链接测试" tabindex="-1">链接测试 <a class="header-anchor" href="#链接测试" aria-label="Permalink to &quot;链接测试&quot;">​</a></h4><p>分为三个方面：</p><ul><li>测试所有链接是否按指示的那样链接到了该链接的页面</li><li>测试所链接的页面是否存在</li><li>保证 Web 应用系统上没有孤立的页面</li></ul><h4 id="表单测试" tabindex="-1">表单测试 <a class="header-anchor" href="#表单测试" aria-label="Permalink to &quot;表单测试&quot;">​</a></h4><p>验证服务器是否能正确的<strong>保存这些数据</strong>,后台运行的程序能否正确解释和使用这些信息。测试提交操作的<strong>完整性</strong></p><h4 id="回归测试" tabindex="-1">回归测试 <a class="header-anchor" href="#回归测试" aria-label="Permalink to &quot;回归测试&quot;">​</a></h4><p>测试软件变更之后，变更部分的正确性和对变更需求的符合性</p>',48)]))}const q=l(o,[["render",h]]);export{b as __pageData,q as default};
