import{_ as a,a as r}from"./chunks/浏览器渲染原理-transform.DaZE-p0g.js";import{_ as s,c as p,ag as t,o as e}from"./chunks/framework.BxW8Wou5.js";const o="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-%E6%B8%B2%E6%9F%93%E6%97%B6%E9%97%B4%E7%82%B9.jpg",i="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF.jpg",n="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-%E8%A7%A3%E6%9E%90HTML.jpg",l="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-DOM%E6%A0%91.jpg",c="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-CSS%E6%A0%91.jpg",B="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-%E8%A7%A3%E6%9E%90JS.jpg",h="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-%E6%A0%B7%E5%BC%8F%E8%AE%A1%E7%AE%97.jpg",F="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-%E5%B8%83%E5%B1%80.jpg",d="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-layout%E6%A0%91.jpg",g="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-%E5%88%86%E5%B1%82.jpg",A="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-%E7%BB%98%E5%88%B6.jpg",m="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-%E7%BB%98%E5%88%B6%E7%BB%93%E6%9D%9F.jpg",_="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-%E5%88%86%E5%9D%97.jpg",b="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-%E5%88%86%E5%9D%97-%E7%BA%BF%E7%A8%8B.jpg",u="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-%E5%85%89%E6%A0%85%E5%8C%96.jpg",S="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-%E5%85%89%E6%A0%85%E5%8C%96-GPU.jpg",f="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-%E7%94%BB.jpg",k="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-%E5%85%A8%E8%BF%87%E7%A8%8B.jpg",q="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-reflow.jpg",C="/blog/picture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86-repaint.jpg",J=JSON.parse('{"title":"浏览器渲染原理","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/前端基础进阶/浏览器渲染原理.md","filePath":"advanced/前端基础进阶/浏览器渲染原理.md","lastUpdated":1705938767000}'),M={name:"advanced/前端基础进阶/浏览器渲染原理.md"};function P(j,E,x,y,D,O){return e(),p("div",null,E[0]||(E[0]=[t('<h1 id="浏览器渲染原理" tabindex="-1">浏览器渲染原理 <a class="header-anchor" href="#浏览器渲染原理" aria-label="Permalink to &quot;浏览器渲染原理&quot;">​</a></h1><h2 id="渲染" tabindex="-1">渲染 <a class="header-anchor" href="#渲染" aria-label="Permalink to &quot;渲染&quot;">​</a></h2><p>渲染（render）就是将html字符串转换为页面像素信息</p><img src="'+o+'"><h3 id="浏览器是如何渲染页面的" tabindex="-1">浏览器是如何渲染页面的？ <a class="header-anchor" href="#浏览器是如何渲染页面的" aria-label="Permalink to &quot;浏览器是如何渲染页面的？&quot;">​</a></h3><p>当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。</p><p>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</p><h4 id="渲染流水线" tabindex="-1">渲染流水线 <a class="header-anchor" href="#渲染流水线" aria-label="Permalink to &quot;渲染流水线&quot;">​</a></h4><p>整个渲染流程分为多个阶段，分别是: HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。这样，整个渲染流程就形成了一套组织严密的生产流水线。</p><img src="'+i+'"><br><h5 id="_1-解析html" tabindex="-1">1. 解析HTML <a class="header-anchor" href="#_1-解析html" aria-label="Permalink to &quot;1. 解析HTML&quot;">​</a></h5><p>因为字符串不好处理，所以需要将HTML字符串抽象为DOM（Document Object Model）树和CSSOM （CSS Object model）树（即抽象成对象）</p><img src="'+n+'"><p>使用JS操作DOM时，就是在操作DOM树</p><img src="'+l+'"><p>因为CSS规则与JS不一样所以树也不一样(JS也可以操作样式)</p><img src="'+c+`"><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           根节点代表页面中所有样式表（StylesheetList）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              每个规则形成一棵子树（CSSStyleRule）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                         |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">选择器为左子树（选择器名）                   具体规则为右子树（style）</span></span></code></pre></div><img src="`+a+'"><p><strong>CSS代码不会阻塞HTML的解析（因为跑在不同的线程）</strong></p><p>解析过程中遇到CSS解析CSS，遇到JS执行JS。为了提高解析效率，浏览器在开始解析前，会启动一个<strong>预解析线程</strong>，率先下载HTML中的外部CSS文件和外部的JS文件</p><p>如果主线程解析到<code>link</code>位置，此时外部的CSS文件还没有下载解析好，主线程不会等待，继续解析后续的HTML。这是因为下载和解析CSS的工作是在预解析线程中进行的。<strong>这就是CSS不会阻塞HTML解析的根本原因。</strong></p><img src="'+B+'"><p><strong>渲染主线程遇到JS必须暂停一切行为，等待下载执行完后才能继续，预解析线程可以分担一点下载 JS的任务</strong></p><p>如果主线程解析到<code>script</code>位置，会停止解析HTML，转而等待JS文件下载好，并将全局代码解析执行完成后，才能继续解析HTML。这是因为JS代码的执行过程可能会修改当前DOM树，所以DOM树的生成必须暂停。<strong>这就是JS会阻塞HTML解析的根本原因。</strong></p><p><strong>第一步完成后，会得到DOM树和CSSOM树</strong>，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在CSSOM树中。</p><hr><h5 id="_2-样式计算" tabindex="-1">2. 样式计算 <a class="header-anchor" href="#_2-样式计算" aria-label="Permalink to &quot;2. 样式计算&quot;">​</a></h5><br><img src="'+h+'"><p>目的是得到每一个DOM节点的最终样式（计算后的样式-Computed Style：所有的CSS属性必须全部有值）<br><a href="./../../frontend-basic/css/css属性值的计算过程.html">可参考CSS属性值计算过程</a><br><a href="./../../frontend-basic/css/css层叠与继承.html">可参考CSS的层叠与继承</a></p><p>渲染的第二步是样式计算，依次为树中的每个节点计算出它最终的样式，称之为Computed Style</p><p>在这一过程中，很多预设值会变成绝对值，比如<code>red</code>会变成<code>rgb(255,0,0)</code>;相对单位会变成绝对单位，比如<code>em</code>会变成<code>px</code></p><p><strong>这一步完成后，会得到一棵带有样式的DOM树</strong></p><hr><h5 id="_3-布局" tabindex="-1">3. 布局 <a class="header-anchor" href="#_3-布局" aria-label="Permalink to &quot;3. 布局&quot;">​</a></h5><br><img src="'+F+'"><p><a href="./../../frontend-basic/css/css视觉格式化模型.html">可参考CSS视觉格式化模型</a></p><p>有些CSS属性（百分比、auto宽高、位置等）需要在布局属性算出</p><p><strong>DOM树与Layout(布局)树不一定是一一对应的</strong></p><img src="'+d+'"><p>比如<code>display:none</code>的节点没有几何信息，因此不会生成到布局树；又比如使用了为元素选择器，虽然DOM树中不存在这些伪元素节点，但他们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等都会导致DOM树和布局树无法一一对应</p><p>渲染的第三步是布局树，<strong>布局完成后会得到布局树</strong></p><p>布局阶段会遍历每一个DOM树的节点，计算每个节点的几何信息（宽高、相对包含块的位置等）</p><h5 id="_4-分层" tabindex="-1">4. 分层 <a class="header-anchor" href="#_4-分层" aria-label="Permalink to &quot;4. 分层&quot;">​</a></h5><br><img src="'+g+'"><p><a href="./../../frontend-basic/css/css视觉格式化模型.html#多个定位元素重叠">堆叠上下文</a>、z-index、opacity、transform等元素会影响分层结果</p><p>可以使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/will-change" target="_blank" rel="noreferrer">will-change</a>属性来手动控制分层</p><p>渲染第四步是分层（每一层都会占用大量性能）</p><p>主线程会使用一套复杂的策略对整个布局树中进行分层</p><p>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。</p><p>滚动条、堆叠上下文、transform、opacity等样式都会或多或少的影响分层结果，也可通过<code>will-change</code>属性更大程度的影响分层结果</p><h5 id="_5-绘制" tabindex="-1">5.绘制 <a class="header-anchor" href="#_5-绘制" aria-label="Permalink to &quot;5.绘制&quot;">​</a></h5><br><img src="'+A+`"><p>这里的绘制，是为每一层生成如何绘制的指令</p><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>将笔移动到10,30位置</span></span>
<span class="line"><span>画一个200*300的矩形</span></span>
<span class="line"><span>用红色填充矩形</span></span>
<span class="line"><span>将笔移动到500，600</span></span></code></pre></div><p><strong>渲染主线程的工作到此为止，剩余步骤交给其他线程处理</strong></p><img src="`+m+'"><p>渲染第五步是绘制，主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来</p><h5 id="_6-分块" tabindex="-1">6.分块 <a class="header-anchor" href="#_6-分块" aria-label="Permalink to &quot;6.分块&quot;">​</a></h5><br><img src="'+_+'"><p>分块会将每一层分为多个小的区域</p><img src="'+b+'"><p>分块的工作是交给多个线程同时进行的</p><p>渲染的第六步是分块</p><p>完成第五步绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将有合成线程完成。</p><p>合成线程首先对每个图层进行分块，将其划分为更多的小区域</p><p>他会从线程池中拿取多个线程来完成分块工作。</p><h5 id="_7-光栅化" tabindex="-1">7.光栅化 <a class="header-anchor" href="#_7-光栅化" aria-label="Permalink to &quot;7.光栅化&quot;">​</a></h5><p>光栅化是将每个块变成位图(类似二维数组，包含像素信息)</p><p>优先处理靠近视口的块 <br><img src="'+u+'"></p><p>这个过程会用到GPU加速(显卡) <br><img src="'+S+'"></p><p>渲染第七步是光栅化</p><p>合成线程会将块信息交给GPU进程，以极高的速度完成光栅化。</p><p>GPU进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块</p><p><strong>光栅化的结果，就是一块一块的位图</strong></p><h5 id="_8-画" tabindex="-1">8. 画 <a class="header-anchor" href="#_8-画" aria-label="Permalink to &quot;8. 画&quot;">​</a></h5><p>合成线程计算处每个位图在屏幕上的位置，交给GPU进行最终呈现</p><br><img src="'+f+'"><p>渲染第八步是画</p><p>合成线程拿到每个层、每个块的位图后，生成一个个[指引(quad)]信息。</p><p>指引会表示出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。</p><p>变形发生在合成线程，与渲染主线程无关，这就是<code>transform</code>效率高的本质原因</p><p>合成线程会把quad提交给GPU进程，有GPU进程产生系统调用，提交给GPU硬件，完成最终的屏幕成像</p><h5 id="全过程" tabindex="-1">全过程 <a class="header-anchor" href="#全过程" aria-label="Permalink to &quot;全过程&quot;">​</a></h5><img src="'+k+'"><h2 id="什么是reflow-重" tabindex="-1">什么是reflow(重)? <a class="header-anchor" href="#什么是reflow-重" aria-label="Permalink to &quot;什么是reflow(重)?&quot;">​</a></h2><img src="'+q+'"><p>修改几何信息（尺寸、位置）等会影响布局的时候，会重新进行第二步样式计算</p><hr><p>标准答案： reflow的本质就是重新计算layout树</p><p>当进行了影响布局树的操作后，需要重新计算布局树，会引发layout</p><p>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当JS代码全部完成后在进行统一计算。所以，改动属性造成的reflow是异步完成的</p><p>也同样因为如此，当JS获取布局属性时，就可能造成无法获取到最新的布局信息</p><p>浏览器在权衡下，最终决定获取属性立即reflow</p><h2 id="什么是repaint" tabindex="-1">什么是repaint <a class="header-anchor" href="#什么是repaint" aria-label="Permalink to &quot;什么是repaint&quot;">​</a></h2><br><img src="'+C+'"><hr><p>标准答案:repaint的本质就是重新更根据分层信息计算绘制指令</p><p>当改动了可见样式后，就需要重新计算，会引发repaint</p><p>由于元素的布局信息也属于可见样式，所以reflow一定会引起repaint</p><h2 id="为什么transform效率高" tabindex="-1">为什么transform效率高 <a class="header-anchor" href="#为什么transform效率高" aria-label="Permalink to &quot;为什么transform效率高&quot;">​</a></h2><br><img src="'+r+'"> --- <p>标准答案:因为transform既不会影响布局也不会影响绘制指令，他影响的只是渲染流程的最后一个[draw]阶段</p><p>由于draw阶段在合成线程中，所以transform的变化几乎不会影响渲染主线程。反之，渲染胸怀像昵称无论如何忙碌，也不会影响transform的变化。</p>',115)]))}const L=s(M,[["render",P]]);export{J as __pageData,L as default};
