import{_ as l,c as e,ag as i,o as r}from"./chunks/framework.BxW8Wou5.js";const _=JSON.parse('{"title":"7、数据库设计","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/软件设计师/第5章 - 数据库/7.数据库设计.md","filePath":"ruankao/软件设计师/第5章 - 数据库/7.数据库设计.md","lastUpdated":null}'),t={name:"ruankao/软件设计师/第5章 - 数据库/7.数据库设计.md"};function o(h,a,n,u,d,s){return r(),e("div",null,a[0]||(a[0]=[i('<h1 id="_7、数据库设计" tabindex="-1">7、数据库设计 <a class="header-anchor" href="#_7、数据库设计" aria-label="Permalink to &quot;7、数据库设计&quot;">​</a></h1><h2 id="策略" tabindex="-1">策略 <a class="header-anchor" href="#策略" aria-label="Permalink to &quot;策略&quot;">​</a></h2><ul><li>自顶向下</li><li>自底向上</li></ul><h2 id="er-图-概念模型-实体联系模型" tabindex="-1">ER 图（概念模型，实体联系模型） <a class="header-anchor" href="#er-图-概念模型-实体联系模型" aria-label="Permalink to &quot;ER 图（概念模型，实体联系模型）&quot;">​</a></h2><h3 id="实体" tabindex="-1">实体 <a class="header-anchor" href="#实体" aria-label="Permalink to &quot;实体&quot;">​</a></h3><ul><li>实体用矩形表示，框内写实体名</li></ul><h3 id="联系" tabindex="-1">联系 <a class="header-anchor" href="#联系" aria-label="Permalink to &quot;联系&quot;">​</a></h3><ul><li>联系用菱形表示，通常菱形框内写联系名，用无向边分别与有关实体连接起来，同时标注关系（1:1）</li><li>把多个实体联系起来</li><li>关系要考虑双向，再进行合并</li></ul><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><ul><li>是实体某方面的特性，用椭圆表示，在椭圆内写属性名，通过无向边和实体连接起来</li></ul><h2 id="步骤-新奥尔良法" tabindex="-1">步骤（新奥尔良法） <a class="header-anchor" href="#步骤-新奥尔良法" aria-label="Permalink to &quot;步骤（新奥尔良法）&quot;">​</a></h2><p>当各阶段不能满足用户需求时，均需返回前一阶段，进行必要的修正，如此往复，直到满意为止。</p><h3 id="用户需求分析-收集用户需求-确定系统边界" tabindex="-1">用户需求分析（收集用户需求，确定系统边界） <a class="header-anchor" href="#用户需求分析-收集用户需求-确定系统边界" aria-label="Permalink to &quot;用户需求分析（收集用户需求，确定系统边界）&quot;">​</a></h3><ul><li>在项目确定之后</li><li>用户和设计人员对数据库应用系统所要设计的内容和功能的整理和描述</li><li>是后续开发的基础（逻辑设计以此结果为依据）</li><li>结果是系统说明文档，包括<strong>数据字典、数据流图、用户活动、需求说明文档</strong></li></ul><h3 id="概念设计-er-图" tabindex="-1">概念设计（ER 图） <a class="header-anchor" href="#概念设计-er-图" aria-label="Permalink to &quot;概念设计（ER 图）&quot;">​</a></h3><ul><li>要把大的系统，拆分成局部应用</li><li>设计 ER 图时，先<strong>设计局部视图</strong>，再<strong>合并取消冲突</strong></li></ul><h4 id="冲突" tabindex="-1">冲突 <a class="header-anchor" href="#冲突" aria-label="Permalink to &quot;冲突&quot;">​</a></h4><ul><li>属性冲突：同一属性会存在于不同 ER 图，但是取值范围、类型、单位等可能会不一致</li><li>命名冲突：相同意义的属性在不同 ER 图中命名不同，或是相同命名有不同含义</li><li>结构冲突：同一实体在不同 ER 图中有不同的属性，同一对象在一个 ER 图中为实体，在另一个中为属性</li></ul><h4 id="合并优化" tabindex="-1">合并优化 <a class="header-anchor" href="#合并优化" aria-label="Permalink to &quot;合并优化&quot;">​</a></h4><ul><li>实体类型的合并</li><li>冗余属性的消除</li><li>冗余联系的消除</li></ul><h3 id="逻辑设计-确定数据模型、er-图转关系模型-规范化" tabindex="-1">逻辑设计（确定数据模型、ER 图转关系模型，规范化） <a class="header-anchor" href="#逻辑设计-确定数据模型、er-图转关系模型-规范化" aria-label="Permalink to &quot;逻辑设计（确定数据模型、ER 图转关系模型，规范化）&quot;">​</a></h3><ul><li>可以是层次模型、网状模型、关系模型</li></ul><h4 id="er-图转换为关系模型" tabindex="-1">ER 图转换为关系模型 <a class="header-anchor" href="#er-图转换为关系模型" aria-label="Permalink to &quot;ER 图转换为关系模型&quot;">​</a></h4><ul><li>实体转换为关系模式（简单）：实体名就是关系模式的名称，实体属性转换为关系模型的属性，实体标识符转换为关系的码</li><li>联系转换为关系模式： <ul><li>一对一联系的转换：将联系归并到关联实体的任一方，给待归并方加上另一个实体的码和联系的属性</li><li>一对多联系的转换：将联系归并到关联的两个实体的<strong>多方</strong>，给待归并方加上另一个实体的码和联系的属性</li><li>多对多联系的转换：转换成独立的关系模型，名称为联系的名称，属性为关联实体的码和联系的属性</li></ul></li></ul><h3 id="物理设计-计算机上的实现" tabindex="-1">物理设计（计算机上的实现） <a class="header-anchor" href="#物理设计-计算机上的实现" aria-label="Permalink to &quot;物理设计（计算机上的实现）&quot;">​</a></h3>',25)]))}const b=l(t,[["render",o]]);export{_ as __pageData,b as default};
