import{_ as l,c as e,ag as i,o as r}from"./chunks/framework.BxW8Wou5.js";const _=JSON.parse('{"title":"2、UML 中的关系","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/软件设计师/第7章 - UML/2.UML中的关系.md","filePath":"ruankao/软件设计师/第7章 - UML/2.UML中的关系.md","lastUpdated":null}'),t={name:"ruankao/软件设计师/第7章 - UML/2.UML中的关系.md"};function o(n,a,h,u,s,d){return r(),e("div",null,a[0]||(a[0]=[i('<h1 id="_2、uml-中的关系" tabindex="-1">2、UML 中的关系 <a class="header-anchor" href="#_2、uml-中的关系" aria-label="Permalink to &quot;2、UML 中的关系&quot;">​</a></h1><p>UML 中有 4 种关系：<strong>依赖、关联、泛化、实现</strong></p><h2 id="依赖" tabindex="-1">依赖 <a class="header-anchor" href="#依赖" aria-label="Permalink to &quot;依赖&quot;">​</a></h2><ul><li>是两个事物间的语义关系，其中一个事物发生变化会影响另外一个事物</li><li>图形上是有方向的虚线</li></ul><h2 id="关联-上午题考得最多" tabindex="-1">关联（上午题考得最多） <a class="header-anchor" href="#关联-上午题考得最多" aria-label="Permalink to &quot;关联（上午题考得最多）&quot;">​</a></h2><ul><li>是一种结构关系，描述了一组链，链是对象之间的连接</li><li>聚集是一种特殊类型的关联，描述了整体和部分间的结构关系，<strong>菱形指向整体</strong></li><li>关联上可以标注重复度和角色</li></ul><h3 id="关联的多重度" tabindex="-1">关联的多重度 <a class="header-anchor" href="#关联的多重度" aria-label="Permalink to &quot;关联的多重度&quot;">​</a></h3><ul><li>A 的实例可以对应多少个 B 的实例</li><li>图形上方为多重度，下方为角色</li></ul><h3 id="聚合" tabindex="-1">聚合 <a class="header-anchor" href="#聚合" aria-label="Permalink to &quot;聚合&quot;">​</a></h3><ul><li>部分和整体生命周期不一致</li><li>整体消失了，部分可以仍然存在</li></ul><h3 id="组合" tabindex="-1">组合 <a class="header-anchor" href="#组合" aria-label="Permalink to &quot;组合&quot;">​</a></h3><ul><li>部分和整体生命周期一致</li><li>整体消失，部分也消失</li></ul><h2 id="泛化-父类泛化子类" tabindex="-1">泛化（父类泛化子类） <a class="header-anchor" href="#泛化-父类泛化子类" aria-label="Permalink to &quot;泛化（父类泛化子类）&quot;">​</a></h2><ul><li>是一种一般/特殊关系</li><li>特殊元素的对象可替代一般元素，子元素共享了父元素的结构和行为</li><li>图形上是一条带有空心箭头的实现，指向父元素</li></ul><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><ul><li>是类元之间的语义关系</li></ul>',16)]))}const m=l(t,[["render",o]]);export{_ as __pageData,m as default};
