import{_ as o,c as t,ag as d,o as r}from"./chunks/framework.BxW8Wou5.js";const _=JSON.parse('{"title":"5. vue的生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"interview/vue/5. vue生命周期.md","filePath":"interview/vue/5. vue生命周期.md","lastUpdated":1705937785000}'),c={name:"interview/vue/5. vue生命周期.md"};function a(i,e,u,l,n,s){return r(),t("div",null,e[0]||(e[0]=[d('<h1 id="_5-vue的生命周期" tabindex="-1">5. vue的生命周期 <a class="header-anchor" href="#_5-vue的生命周期" aria-label="Permalink to &quot;5. vue的生命周期&quot;">​</a></h1><p>vue2和vue3的生命周期是有区别的</p><blockquote><p>beforeCreate created beforeMount mounted beforeUpdate updated beforeDestroy Destoryed</p></blockquote><p><strong>vue3将<code>beforeDestroy</code>和<code>Destroyed</code>替换为<code>beforeUnmount</code>和<code>unmounted</code></strong></p><p><strong><code>options API</code>和<code>Composition API</code>在生命周期上也有差别:</strong></p><blockquote><p><code>Composition API</code>提供了<code>setup</code>函数作为入口函数，替换了<code>beforeCreate</code>和<code>created</code>这两个生命周期钩子。所以实际开发中，可以简单把setup理解为created进行使用。</p></blockquote><h2 id="大致流程-vue2" tabindex="-1">大致流程（Vue2） <a class="header-anchor" href="#大致流程-vue2" aria-label="Permalink to &quot;大致流程（Vue2）&quot;">​</a></h2><p><strong>挂载流程</strong></p><ul><li>初始化事件及生命周期</li><li>触发<code>beforeCreate</code></li><li>实例创建完成、组件、属性等初始化完成，触发<code>created</code></li><li>vue开始解析模板，生成虚拟DOM，页面还不能显示解析好的内容</li><li>触发<code>beforeMount</code></li><li>将内存中的虚拟DOM转换为真实DOM</li><li>触发<code>mounted</code></li></ul><p><strong>更新流程</strong></p><ul><li>数据更新，视图还未更新时，触发<code>beforeUpdate</code></li><li>根据新数据，生成新的虚拟DOM，随后与旧的DOM进行Diff比较。最终完成真实DOM的更新</li><li>触发<code>updated</code></li></ul><p><strong>销毁流程</strong></p><ul><li>销毁组件时，触发<code>beforeDestroy</code></li><li>销毁所有方法等，触发<code>destroyed</code></li></ul><h2 id="数据请求在created和mounted的区别" tabindex="-1">数据请求在<code>created</code>和<code>mounted</code>的区别 <a class="header-anchor" href="#数据请求在created和mounted的区别" aria-label="Permalink to &quot;数据请求在```created```和```mounted```的区别&quot;">​</a></h2><p>created是在组件实例一旦创建完成的时候立刻调用，这时候页面dom节点并未生成；mounted是在页面dom节点渲染完毕之后就立刻执行的。触发时机上created是比mounted要更早的，两者的相同点：都能拿到实例对象的属性和方法。 讨论这个问题本质就是触发的时机，放在mounted中的请求有可能导致页面闪动（因为此时页面dom结构已经生成），但如果在页面加载前完成请求，则不会出现此情况。建议对页面内容的改动放在created生命周期当中。</p>',15)]))}const m=o(c,[["render",a]]);export{_ as __pageData,m as default};
