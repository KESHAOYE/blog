import{_ as l,c as i,ag as e,o as r}from"./chunks/framework.BxW8Wou5.js";const t="/blog/picture/%E8%BD%AF%E8%80%83/%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81.png",o="/blog/picture/%E8%BD%AF%E8%80%83/pv%E6%93%8D%E4%BD%9C.png",h="/blog/picture/%E8%BD%AF%E8%80%83/%E5%89%8D%E8%B6%8B%E5%9B%BE.png",n="/blog/picture/%E8%BD%AF%E8%80%83/PV-%E5%89%8D%E8%B6%8B%E5%9B%BE.png",u="/blog/picture/%E8%BD%AF%E8%80%83/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B.png",q=JSON.parse('{"title":"3、进程与线程","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/系统架构师/第8章 - 计算机基础知识/1、计算机系统组成/3、进程管理.md","filePath":"ruankao/系统架构师/第8章 - 计算机基础知识/1、计算机系统组成/3、进程管理.md","lastUpdated":1748002092000}'),s={name:"ruankao/系统架构师/第8章 - 计算机基础知识/1、计算机系统组成/3、进程管理.md"};function d(p,a,c,b,_,P){return r(),i("div",null,a[0]||(a[0]=[e('<h1 id="_3、进程与线程" tabindex="-1">3、进程与线程 <a class="header-anchor" href="#_3、进程与线程" aria-label="Permalink to &quot;3、进程与线程&quot;">​</a></h1><h2 id="进程" tabindex="-1">进程 <a class="header-anchor" href="#进程" aria-label="Permalink to &quot;进程&quot;">​</a></h2><p>进程是程序运行在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。由程序块、进程控制块（PCB）和数据块三部分组成。 （比如 QQ、微信，一个程序有多个进程）</p><p>PCB 是进程存在的唯一标志。内容包含进程标识符、状态、位置信息、控制信息、队列指针、优先级、现场保护区等。</p><h3 id="状态-三态模型" tabindex="-1">状态（三态模型） <a class="header-anchor" href="#状态-三态模型" aria-label="Permalink to &quot;状态（三态模型）&quot;">​</a></h3><img src="'+t+'"><ul><li>运行态：当一个进程在 CPU 上运行时（单处理机处于运行态的进程只有一个，多线程在 CPU 上交替运行）</li><li>就绪：一个进程获得了除 CPU 外的一切所需资源，一旦得到处理机即可运行</li><li>阻塞（等待）：一个进程正在等待某一事件发生（例如请求 IO、等待 IO 完成等）而暂时停止运行，此时即使把 CPU 分配给进程也无法运行，故称进程处于阻塞状态</li></ul><h3 id="调度算法" tabindex="-1">调度算法 <a class="header-anchor" href="#调度算法" aria-label="Permalink to &quot;调度算法&quot;">​</a></h3><ul><li>时间片轮转：执行一段时间换下一个进程</li><li>先来先服务：每次从就绪队列中选择一个最先进入该队列的进程为其分配处理机</li><li>短作业优先：作业事件短的优先</li><li>高响应比优先：考虑响应比，综合先来先服务和短作业优先</li><li>优先级调度</li><li>抢占式/非抢占式</li></ul><h3 id="同步与互斥" tabindex="-1">同步与互斥 <a class="header-anchor" href="#同步与互斥" aria-label="Permalink to &quot;同步与互斥&quot;">​</a></h3><ul><li><p>互斥（间接制约关系）：千军万马过独木桥</p><p>临界资源：各进程间需要互斥方式对其进行共享的资源 临界区：代码中访问临界资源的代码</p></li><li><p>同步（直接制约关系 ）：不同进程之间速度有差异，在一定情况停下等待</p></li></ul><h3 id="pv-操作【操作系统原语】" tabindex="-1">PV 操作【操作系统原语】 <a class="header-anchor" href="#pv-操作【操作系统原语】" aria-label="Permalink to &quot;PV 操作【操作系统原语】&quot;">​</a></h3><ul><li>信号量：是一种特殊的变量（全局变量） <ul><li>信号量可以表示资源数量</li><li>信号量为负数时还可以表示排队进程数</li></ul></li></ul><img src="'+o+'"><h4 id="p-操作" tabindex="-1">P 操作 <a class="header-anchor" href="#p-操作" aria-label="Permalink to &quot;P 操作&quot;">​</a></h4><ul><li>先对信号量自减 1（S = S - 1）申请/锁定资源）</li><li>判断资源是否足够（S &lt; 0）</li><li>如果 S &lt; 0 进入阻塞队列排队（先进先出）</li></ul><h4 id="v-操作" tabindex="-1">V 操作 <a class="header-anchor" href="#v-操作" aria-label="Permalink to &quot;V 操作&quot;">​</a></h4><ul><li>先对信号量自增 1（S = S + 1）释放/解锁资源</li><li>检查是否有进程排队（S &lt;= 0）</li></ul><h4 id="模拟" tabindex="-1">模拟 <a class="header-anchor" href="#模拟" aria-label="Permalink to &quot;模拟&quot;">​</a></h4><p>2 台打印机，3 个进程要互斥使用打印机，模拟 PV 过程。</p><p>信号量 S 的初值是打印机的数量 2， PV 的取值范围是[-1,2]</p><h3 id="前趋图" tabindex="-1">前趋图 <a class="header-anchor" href="#前趋图" aria-label="Permalink to &quot;前趋图&quot;">​</a></h3><img src="'+h+'"><ul><li>1 个箭头表示 1 个前趋关系</li><li>A 有箭头指向 D，记录为（A，D）</li><li>没有前趋进程的节点是起始进程（前趋可能有多个），没有后继进程的节点是终结进程</li></ul><h3 id="前趋图和-pv" tabindex="-1">前趋图和 PV <a class="header-anchor" href="#前趋图和-pv" aria-label="Permalink to &quot;前趋图和 PV&quot;">​</a></h3><img src="'+n+'"><ul><li>并发图中某活动有后继就有 V 操作释放资源并通知后继活动，有前趋就有 P 操作检查资源是否足够</li><li>实现并发的信号量初始值一般为 0，有几个箭头就有几个信号量</li></ul><h3 id="死锁" tabindex="-1">死锁 <a class="header-anchor" href="#死锁" aria-label="Permalink to &quot;死锁&quot;">​</a></h3><p>进程管理是操作系统的核心，但如果设计不当，就会出现死锁问题。如果一个进程在等待一件不可能发生的事，则进程就死锁了。而如果一个或多个进程产生死锁，则系统处于死锁状态。</p><h4 id="四大条件" tabindex="-1">四大条件 <a class="header-anchor" href="#四大条件" aria-label="Permalink to &quot;四大条件&quot;">​</a></h4><ul><li>互斥：至少有一个资源必须处于非共享模式。这意味着一次只有一个进程可以使用该资源。如果其他进程请求该资源，它们必须等待，直到占用该资源的进程释放它为止</li><li>保持和等待：一个进程至少持有一个资源，并且正在请求获取其他进程持有的资源，但尚未被分配到这些资源。（ 进程在持有自己需要的资源的同时，又去请求其他进程正在使用的资源，并且在未获得这些资源之前不会释放自己已经持有的资源）</li><li>不剥夺：已经分配给一个进程的资源不能被强制性地从该进程夺走，只能由持有该资源的进程主动释放。（如果操作系统可以强制剥夺一个进程持有的资源，并将其分配给其他需要该资源的进程，那么死锁就可以被打破。例如，在某些内存管理策略中，操作系统可以暂时将某些进程的内存换出到磁盘，从而释放内存资源。）</li><li>环路等待：存在一个由两个或多个进程组成的等待链，链中的每个进程都在等待下一个进程所持有的资源。例如，进程 A 等待进程 B 持有的资源，进程 B 等待进程 C 持有的资源，而进程 C 又在等待进程 A 持有的资源，形成一个环路。（循环等待是死锁发生的最终必要条件。如果没有这样的等待环路，即使满足了前三个条件，也不会发生一组进程永远阻塞的情况。 ）</li></ul><h4 id="资源数计算" tabindex="-1">资源数计算 <a class="header-anchor" href="#资源数计算" aria-label="Permalink to &quot;资源数计算&quot;">​</a></h4><p>例：系统有 3 个进程 ABC。这三个进程都需要 5 个系统资源。如果系统至少有多少个资源，则不可能发生死锁。</p><p>假设进程数量为 n，每个进程需要的系统资源分别为 k1...kn,则公式为（k1+k2+...+kn）- n + 1</p><p>则例题答案为（5+5+5）-3+1 = 13</p><h4 id="银行家算法-分配资源的原则" tabindex="-1">银行家算法：分配资源的原则 <a class="header-anchor" href="#银行家算法-分配资源的原则" aria-label="Permalink to &quot;银行家算法：分配资源的原则&quot;">​</a></h4><ul><li>当一个进程对资源的最大需求量不超过系统中的资源数时可以接纳该进程</li><li>进程可以分期请求资源，但请求总数不能超过最大需求量</li><li>当系统现有资源不能满足进程尚需资源数时，对进程的请求可以推迟分配，但总能使进程在有限时间里得到资源</li></ul><h2 id="线程" tabindex="-1">线程 <a class="header-anchor" href="#线程" aria-label="Permalink to &quot;线程&quot;">​</a></h2><p>一个进程可以有多个线程</p><h2 id="两者的关系" tabindex="-1">两者的关系 <a class="header-anchor" href="#两者的关系" aria-label="Permalink to &quot;两者的关系&quot;">​</a></h2><p>程序 - 进程 - 线程</p><p>进程的两个基本属性：可拥有资源的独立单位；可独立调度和分配资源的基本单位【内核线程、用户线程】</p><img src="'+u+'"><p>同进程中，文件可以被共享，栈指针不能被共享</p>',44)]))}const E=l(s,[["render",d]]);export{q as __pageData,E as default};
