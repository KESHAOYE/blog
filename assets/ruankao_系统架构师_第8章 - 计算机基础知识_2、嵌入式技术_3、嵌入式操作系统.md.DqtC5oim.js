import{_ as l,c as e,ag as i,o as r}from"./chunks/framework.BxW8Wou5.js";const t="/blog/picture/%E8%BD%AF%E8%80%83/%E9%B8%BF%E8%92%99%E6%9E%B6%E6%9E%84%E5%9B%BE.png",b=JSON.parse('{"title":"3、嵌入式操作系统","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/系统架构师/第8章 - 计算机基础知识/2、嵌入式技术/3、嵌入式操作系统.md","filePath":"ruankao/系统架构师/第8章 - 计算机基础知识/2、嵌入式技术/3、嵌入式操作系统.md","lastUpdated":1748002092000}'),o={name:"ruankao/系统架构师/第8章 - 计算机基础知识/2、嵌入式技术/3、嵌入式操作系统.md"};function n(h,a,s,d,u,c){return r(),e("div",null,a[0]||(a[0]=[i('<h1 id="_3、嵌入式操作系统" tabindex="-1">3、嵌入式操作系统 <a class="header-anchor" href="#_3、嵌入式操作系统" aria-label="Permalink to &quot;3、嵌入式操作系统&quot;">​</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><p>是指用于嵌入式系统的操作系统。嵌入式操作系统是一种用途广泛的系统软件，负责嵌入式系统的全部软、硬件资源分配、任务调度、控制、协调并行活动等工作。通常包括与硬件相关的底层驱动软件、系统内核、设备驱动接口、通信协议、图形界面、标准化浏览器等。</p><h2 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;分类&quot;">​</a></h2><h3 id="根据对时间的敏感程度可以分为" tabindex="-1">根据对时间的敏感程度可以分为： <a class="header-anchor" href="#根据对时间的敏感程度可以分为" aria-label="Permalink to &quot;根据对时间的敏感程度可以分为：&quot;">​</a></h3><ul><li>非实时操作系统</li><li>实时操作系统：能够在<strong>指定或者确定的时间内</strong>完成系统功能和外部或内部、同步或异步事件做出响应的系统，调度算法是抢占方式</li></ul><h4 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-label="Permalink to &quot;算法&quot;">​</a></h4><ul><li>优先级调度算法：优先级调度算法是一种根据任务的优先级来决定其执行顺序的调度策略。每个任务被分配一个优先级，调度程序总是选择就绪队列中优先级最高的任务来执行。优先级可以静态分配（在任务创建时确定且不再改变），也可以动态分配（根据任务的某些特性在运行时调整）。</li><li>抢占式优先级调度算法：抢占式优先级调度算法是优先级调度算法的一种变体。在这种模式下，如果一个新到达的就绪任务的优先级高于当前正在执行的任务的优先级，调度程序会立即中断当前任务的执行，将 CPU 分配给这个更高优先级的任务。</li><li>最早截止期调度算法：最早截止期调度算法是一种动态优先级调度算法，主要用于实时系统中。它根据任务的截止期限来分配优先级，截止期限越早的任务拥有越高的优先级。</li><li>最晚截止期调度算法：最晚截止期调度算法 (LDF) 并不像 EDF 那样普遍和直接应用于通用的 CPU 调度。它的核心思想是优先调度那些截止期限最晚的任务。这种策略听起来可能有些反直觉，因为它似乎会推迟那些紧急的任务。</li></ul><h3 id="根据对安全性的要求来看可以分为" tabindex="-1">根据对安全性的要求来看可以分为： <a class="header-anchor" href="#根据对安全性的要求来看可以分为" aria-label="Permalink to &quot;根据对安全性的要求来看可以分为：&quot;">​</a></h3><ul><li>安全攸关系统：也称为安全关键系统或者安全生命关键系统，是指其不正确的功能或者失效会<strong>导致人员伤亡、财产损失等严重后果</strong>的计算机系统</li><li>非安全攸关系统</li></ul><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><ul><li>微型化</li><li>代码质量高</li><li>专业化</li><li>实时性强（实时性系统的最核心特点）</li><li>可裁剪、可配置（功能可定制）</li><li>易移植性</li></ul><h2 id="内核结构" tabindex="-1">内核结构 <a class="header-anchor" href="#内核结构" aria-label="Permalink to &quot;内核结构&quot;">​</a></h2><p>内核是操作系统的核心部分，它管理着系统的各种资源。内核可以看成链接应用程序和硬件的一座桥梁，是直接运行在硬件上的最基础的软件实体。</p><h3 id="分类-1" tabindex="-1">分类 <a class="header-anchor" href="#分类-1" aria-label="Permalink to &quot;分类&quot;">​</a></h3><p>从内核的架构来划分</p><h4 id="宏内核-单体内核" tabindex="-1">宏内核（单体内核） <a class="header-anchor" href="#宏内核-单体内核" aria-label="Permalink to &quot;宏内核（单体内核）&quot;">​</a></h4><p>内核实现的功能多就是宏内核，用户空间只做应用程序，使用系统 API 来实现调用。 优点是减少了进程间通信和状态切换的系统开销 缺点是内核庞大，占用资源多，不易剪裁；且系统的稳定性和安全性不好</p><h4 id="微内核" tabindex="-1">微内核 <a class="header-anchor" href="#微内核" aria-label="Permalink to &quot;微内核&quot;">​</a></h4><p>内核实现的功能少就是微内核，鸿蒙就是微内核 只实现基础功能，将图形系统、文件系统、设备驱动及通信功能放在内核之外 优点是结构清晰，利于协作开发；方便裁剪和移植；系统的可靠性和安全性高；可用于分布式系统 缺点是用户状态和内核状态需要频繁切换，系统效率不如宏内核，性能偏低</p><h2 id="鸿蒙" tabindex="-1">鸿蒙 <a class="header-anchor" href="#鸿蒙" aria-label="Permalink to &quot;鸿蒙&quot;">​</a></h2><img src="'+t+'"><p>哄蒙整体采用分层的层次化设计，从下到上依次为内核层、系统服务层、框架层和应用层</p><h3 id="技术特点" tabindex="-1">技术特点 <a class="header-anchor" href="#技术特点" aria-label="Permalink to &quot;技术特点&quot;">​</a></h3><ul><li><strong>分布式架构首次应用于终端 OS，实现跨终端无缝协同体验</strong></li><li>确定时延引擎和高性能 IPC 技术实现系统天生流畅</li><li><strong>基于微内核机构重塑终端设备可信安全</strong></li><li>通过统一 IDE 一次开发，多端部署，实现跨终端生态共享</li></ul>',25)]))}const p=l(o,[["render",n]]);export{b as __pageData,p as default};
