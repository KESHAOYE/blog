import{_ as e,c as t,ag as r,o as l}from"./chunks/framework.BxW8Wou5.js";const i="/blog/picture/%E8%BD%AF%E8%80%83/%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B.png",o="/blog/picture/%E8%BD%AF%E8%80%83/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%9E%8B.png",m=JSON.parse('{"title":"1. 软件过程模型","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/系统架构师/第三章 - 软件工程/1. 软件过程模型.md","filePath":"ruankao/系统架构师/第三章 - 软件工程/1. 软件过程模型.md","lastUpdated":1741081357000}'),n={name:"ruankao/系统架构师/第三章 - 软件工程/1. 软件过程模型.md"};function s(h,a,_,d,c,u){return l(),t("div",null,a[0]||(a[0]=[r('<h1 id="_1-软件过程模型" tabindex="-1">1. 软件过程模型 <a class="header-anchor" href="#_1-软件过程模型" aria-label="Permalink to &quot;1. 软件过程模型&quot;">​</a></h1><h2 id="瀑布模型" tabindex="-1">瀑布模型 <a class="header-anchor" href="#瀑布模型" aria-label="Permalink to &quot;瀑布模型&quot;">​</a></h2><p>模型的形态类似于瀑布的结构</p><img src="'+i+'"><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li>严格区分阶段，每个阶段因果关系紧密相连</li><li>只适合<strong>需求明确</strong>的项目</li></ul><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>软件需求完整性、正确性难确定</li><li>严格串行化，<strong>需要很长时间才能看到结果</strong></li><li>瀑布模型<strong>要求每个阶段一次性完成该阶段所有工作</strong>，这不现实</li></ul><h2 id="原型模型" tabindex="-1">原型模型 <a class="header-anchor" href="#原型模型" aria-label="Permalink to &quot;原型模型&quot;">​</a></h2><img src="'+o+'"><p>虚线部分可能不会涉及</p><p><strong>原型开发</strong>是通过开发一个简易系统来获取需求</p><h3 id="特点-1" tabindex="-1">特点 <a class="header-anchor" href="#特点-1" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li>适合需求不明确的项目</li><li>有两个阶段，是原型开发阶段和目标软件开发阶段</li></ul><h3 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h3><ul><li>【抛弃型分支】：仅用在需求分析阶段，用后就抛弃</li><li>【演化型分支】：目标软件是在原型软件的基础上进行开发</li></ul>',16)]))}const E=e(n,[["render",s]]);export{m as __pageData,E as default};
