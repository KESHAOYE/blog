import{_ as e,c as r,ag as i,o as l}from"./chunks/framework.BxW8Wou5.js";const t="/blog/picture/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png",o="/blog/picture/%E8%BD%AF%E8%80%83/4+1%E8%A7%86%E5%9B%BE.png",E=JSON.parse('{"title":"2.软件架构设计与生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/系统架构师/第5章 - 软件架构设计/2.软件架构设计与生命周期.md","filePath":"ruankao/系统架构师/第5章 - 软件架构设计/2.软件架构设计与生命周期.md","lastUpdated":1746770091000}'),n={name:"ruankao/系统架构师/第5章 - 软件架构设计/2.软件架构设计与生命周期.md"};function h(d,a,p,s,_,c){return l(),r("div",null,a[0]||(a[0]=[i('<h1 id="_2-软件架构设计与生命周期" tabindex="-1">2.软件架构设计与生命周期 <a class="header-anchor" href="#_2-软件架构设计与生命周期" aria-label="Permalink to &quot;2.软件架构设计与生命周期&quot;">​</a></h1><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><img src="'+t+'"><p>架构为了支撑需求</p><h3 id="需求分析阶段-在具体架构之前" tabindex="-1">需求分析阶段（在具体架构之前） <a class="header-anchor" href="#需求分析阶段-在具体架构之前" aria-label="Permalink to &quot;需求分析阶段（在具体架构之前）&quot;">​</a></h3><p>需求模型是逻辑模型，到架构设计阶段要转换为物理模型，模型转换需要关注两个问题</p><ul><li>如何根据需求模型构建 SA【架构】模型</li><li>转换工程可以追溯（溯源）</li></ul><h3 id="设计阶段-架构设计属于设计阶段-有高层的架构设计-也有中层的设计模式等" tabindex="-1">设计阶段（架构设计属于设计阶段，有高层的架构设计，也有中层的设计模式等） <a class="header-anchor" href="#设计阶段-架构设计属于设计阶段-有高层的架构设计-也有中层的设计模式等" aria-label="Permalink to &quot;设计阶段（架构设计属于设计阶段，有高层的架构设计，也有中层的设计模式等）&quot;">​</a></h3><p>早期研究架构设计，后期研究架构内设计如何落地</p><p><strong>这是 SA【架构】研究关注的最早和最多的阶段</strong></p><p>需要关注 ADL 和 4+1 视图</p><h3 id="实现阶段" tabindex="-1">实现阶段 <a class="header-anchor" href="#实现阶段" aria-label="Permalink to &quot;实现阶段&quot;">​</a></h3><p>把设计的思想、逻辑落地</p><p>落地时配套构件的方法论</p><h3 id="构件组装阶段" tabindex="-1">构件组装阶段 <a class="header-anchor" href="#构件组装阶段" aria-label="Permalink to &quot;构件组装阶段&quot;">​</a></h3><p>把各部分构件组装起来</p><h3 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-label="Permalink to &quot;部署&quot;">​</a></h3><p>SA 为部署提供高层视图知道</p><h3 id="后开发阶段-维护" tabindex="-1">后开发阶段（维护） <a class="header-anchor" href="#后开发阶段-维护" aria-label="Permalink to &quot;后开发阶段（维护）&quot;">​</a></h3><p>会涉及到架构优化、演化</p><p>动态软件体系结构（内部执行和外部请求导致变化）、体系结构恢复和重建</p><h2 id="adl-类似伪代码" tabindex="-1">ADL（类似伪代码） <a class="header-anchor" href="#adl-类似伪代码" aria-label="Permalink to &quot;ADL（类似伪代码）&quot;">​</a></h2><p>ADL 是一种形式化语言，在底层语义模型的支持下，为软件系统的概念体系结构建模提供了具体语法和概念框架</p><ul><li>C2SADL 【基于组件和消息的软件架构描述语言】</li><li>Wright 【分布、并发类型的架构描述语言】</li><li>ACME 【架构互换语言】</li><li>UniCon 【基于组件和连接的架构描述语言】</li><li>Rapide 【基于事件的架构描述语言】</li></ul><h3 id="三个基本元素" tabindex="-1">三个基本元素 <a class="header-anchor" href="#三个基本元素" aria-label="Permalink to &quot;三个基本元素&quot;">​</a></h3><ul><li>构件：计算或数据存储单元</li><li>连接件：用于构件之间交互建模的体系结构构造块及其支配这些交互的规则</li><li>架构配置：描述体系结构的构件与连接件的连接图</li></ul><h2 id="_4-1-视图" tabindex="-1">4+1 视图 <a class="header-anchor" href="#_4-1-视图" aria-label="Permalink to &quot;4+1 视图&quot;">​</a></h2><p>架构是复杂的东西 需要从不同角度去看待（类似建筑中的电路图、设计图等）</p><p>视图可以降低架构呈现的复杂度</p><img src="'+o+'"><p>逻辑视图用到了类与对象（考试中可能不叫逻辑视图，是个抽象） （实现/开发）视图强调系统配置、装配（体现源代码结构） （进程/过程）视图强调并发、可伸缩、吞吐率 （部署/物理）视图对应发布、安装</p>',31)]))}const b=e(n,[["render",h]]);export{E as __pageData,b as default};
