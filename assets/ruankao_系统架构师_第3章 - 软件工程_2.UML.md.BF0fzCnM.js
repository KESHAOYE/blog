import{_ as l,c as i,ag as r,o as t}from"./chunks/framework.BxW8Wou5.js";const o="/blog/picture/%E8%BD%AF%E8%80%83/UML/%E7%B1%BB%E5%9B%BE%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%9B%BE-%E5%85%B3%E7%B3%BB.png",e="/blog/picture/%E8%BD%AF%E8%80%83/UML/%E9%83%A8%E7%BD%B2%E5%9B%BE.png",n="/blog/picture/%E8%BD%AF%E8%80%83/UML/%E7%94%A8%E4%BE%8B%E5%9B%BE.png",s="/blog/picture/%E8%BD%AF%E8%80%83/UML/%E9%A1%BA%E5%BA%8F%E5%9B%BE.png",h="/blog/picture/%E8%BD%AF%E8%80%83/UML/%E9%A1%BA%E5%BA%8F%E5%9B%BE-%E5%BA%8F%E5%88%97%E7%89%87%E6%AE%B5.png",u="/blog/picture/%E8%BD%AF%E8%80%83/UML/%E7%8A%B6%E6%80%81%E5%9B%BE.png",c="/blog/picture/%E8%BD%AF%E8%80%83/UML/%E6%B4%BB%E5%8A%A8%E5%9B%BE.png",d="/blog/picture/%E8%BD%AF%E8%80%83/UML/%E5%AE%9A%E6%97%B6%E5%9B%BE.png",A=JSON.parse('{"title":"2、UML","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/系统架构师/第3章 - 软件工程/2.UML.md","filePath":"ruankao/系统架构师/第3章 - 软件工程/2.UML.md","lastUpdated":null}'),p={name:"ruankao/系统架构师/第3章 - 软件工程/2.UML.md"};function E(g,a,B,b,m,_){return t(),i("div",null,a[0]||(a[0]=[r('<h1 id="_2、uml" tabindex="-1">2、UML <a class="header-anchor" href="#_2、uml" aria-label="Permalink to &quot;2、UML&quot;">​</a></h1><p><strong>统一建模语言，无关平台和语言，是一个工具集</strong></p><ul><li>构造块：事物、关系、图 <strong>事物</strong>： <ul><li>结构事物：<strong>最静态的部分</strong>，包括：类、接口、协作、用例、活动类、构件和节点</li><li>行为事物：代表时间和空间上的动作。包括消息、动作次序、连接</li><li>分组事物：看成一个盒子，如：包、构件</li><li>注释事物：UML 模型的解释部分。描述、说明和标注模型的元素</li></ul></li><li>规则： 范围、可见性、完整性、执行</li><li>公共机制：规格说明、修饰、公共分类、拓展机制</li></ul><h2 id="静态图-结构图" tabindex="-1">静态图（结构图） <a class="header-anchor" href="#静态图-结构图" aria-label="Permalink to &quot;静态图（结构图）&quot;">​</a></h2><h3 id="类图-描述一组类、接口、协作和它们之间的关系" tabindex="-1">类图：描述一组类、接口、协作和它们之间的关系 <a class="header-anchor" href="#类图-描述一组类、接口、协作和它们之间的关系" aria-label="Permalink to &quot;类图：描述一组类、接口、协作和它们之间的关系&quot;">​</a></h3><ul><li><strong>类名</strong>，方法名，属性名</li><li>多重度（类似一对一、一对多、多对多） <ul><li>1:表示一个集合中的一个对象对应另一个集合中的一个对象</li><li>0..*：表示一个集合中的一个对象对应另一个集合中的 0 个或多个对象</li><li>1..*：表示一个集合中的一个对象对应另一个集合中的 1 个或多个对象（至少对应一个）</li><li>*：表示一个集合中的一个对象对应另一个集合中的多个的对象</li></ul></li><li><strong>关系</strong><img src="'+o+'"><ul><li>依赖关系：一个事物发生变化影响另一个事物（虚线箭头，箭头指向父类）</li><li>关联关系：描述了一组链，链是对象之间的连接（线） <ul><li><strong>聚合关系</strong>：整体与部分生命周期不同（类似显卡和主机的关系）（实线空菱形，菱形指向整体）</li><li><strong>组合关系</strong>：整体与部分生命周期相同（类似）（实线实菱形，菱形指向整体）</li></ul></li><li>实现关系：接口与类之间的关系</li><li><strong>泛化（继承）关系</strong>：特殊/一般关系（实线空箭头，箭头指向父类）</li></ul></li></ul><h3 id="对象图【是类的实体】" tabindex="-1">对象图【是类的实体】 <a class="header-anchor" href="#对象图【是类的实体】" aria-label="Permalink to &quot;对象图【是类的实体】&quot;">​</a></h3><p><strong>描述一组对象及它们之间的关系，描述了在类图中所建立的事物实例的快照</strong></p><h3 id="构件图-一个封装的类和它的接口" tabindex="-1">构件图：一个封装的类和它的接口 <a class="header-anchor" href="#构件图-一个封装的类和它的接口" aria-label="Permalink to &quot;构件图：一个封装的类和它的接口&quot;">​</a></h3><p>描述一个封装的类和它的接口、端口，以及由内嵌的构件和连接件构成的内部结构。构件图用于表示系统的静态设计实现视图。对于由小的部件构建大的系统来说，构件图时很重要的，构件图是类图的变体。</p><h3 id="包图-由模型本身分解而成的组织单元-以及它们之间的依赖关系" tabindex="-1">包图：由模型本身分解而成的组织单元，以及它们之间的依赖关系 <a class="header-anchor" href="#包图-由模型本身分解而成的组织单元-以及它们之间的依赖关系" aria-label="Permalink to &quot;包图：由模型本身分解而成的组织单元，以及它们之间的依赖关系&quot;">​</a></h3><p>包的基本思想是把共同工作的元素放到一个文件夹中。例：多个类或构件组成了一个子系统，就可以将它们放到一个包中。</p><h3 id="部署图-软硬件之间映射" tabindex="-1"><strong>部署图</strong>：软硬件之间映射 <a class="header-anchor" href="#部署图-软硬件之间映射" aria-label="Permalink to &quot;**部署图**：软硬件之间映射&quot;">​</a></h3><p>描述对运行时的处理节点及在其中生存的构件的配置。部署图给出了架构的静态部署视图，通常一个节点包含一个或多个部署图</p><img src="'+e+'"><h3 id="制品图-系统的物理结构" tabindex="-1">制品图：系统的物理结构 <a class="header-anchor" href="#制品图-系统的物理结构" aria-label="Permalink to &quot;制品图：系统的物理结构&quot;">​</a></h3><h3 id="组合结构图" tabindex="-1">组合结构图 <a class="header-anchor" href="#组合结构图" aria-label="Permalink to &quot;组合结构图&quot;">​</a></h3><h2 id="动态图-行为-交互图" tabindex="-1">动态图（行为/交互图） <a class="header-anchor" href="#动态图-行为-交互图" aria-label="Permalink to &quot;动态图（行为/交互图）&quot;">​</a></h2><h3 id="用例图-系统与外部参与者的交互-用例、参与者与它们之间的关系" tabindex="-1"><strong>用例图</strong>：系统与外部参与者的交互（用例、参与者与它们之间的关系） <a class="header-anchor" href="#用例图-系统与外部参与者的交互-用例、参与者与它们之间的关系" aria-label="Permalink to &quot;**用例图**：系统与外部参与者的交互（用例、参与者与它们之间的关系）&quot;">​</a></h3><img src="'+n+'"><ul><li>用户角度描述系统功能</li><li>参与者是外部触发因素</li><li>用例是功能单元</li></ul><h4 id="【用例模型】建立流程" tabindex="-1">【用例模型】建立流程 <a class="header-anchor" href="#【用例模型】建立流程" aria-label="Permalink to &quot;【用例模型】建立流程&quot;">​</a></h4><ul><li><p>第一步：识别参与者【参与者：用户、组织、外部系统、时间】</p></li><li><p>第二步：合并需求获得用例</p></li><li><p>第三步：细化用例描述</p></li><li><p>第四步：调整【优化】用例模型（可选） 【关系包括：</p><ul><li>包含关系【include】： 从多个用例中提取公共行为，提取出来的公共用例为抽象用例，而原始用例成为基本用例、</li><li>扩展关系【extend】： 一个用例明显的混合了两种或两种以上的不同场景，即根据情况可能发生多种分支，则可以将这个用例氛围一个基本用力和一个或多个可拓展用例、</li><li>泛化关系（父子关系）【generalize】：当多个用例共同拥有一种类似的结构和行为的时候，可以将它们的共性抽象成为父用例，其他的用例作为泛化关系中的子用例。子用例继承了父用例所有的机构、行为和关系 】</li></ul></li></ul><h3 id="顺序-序列-图-强调按时间顺序" tabindex="-1"><strong>顺序(序列)图</strong>：强调按时间顺序 <a class="header-anchor" href="#顺序-序列-图-强调按时间顺序" aria-label="Permalink to &quot;**顺序(序列)图**：强调按时间顺序&quot;">​</a></h3><p><strong>强调对象之间消息发送的顺序</strong></p><img src="'+s+'"><h4 id="消息" tabindex="-1">消息 <a class="header-anchor" href="#消息" aria-label="Permalink to &quot;消息&quot;">​</a></h4><ul><li>同步消息</li><li>异步消息</li><li>简单消息</li><li>返回消息</li></ul><h4 id="序列片段" tabindex="-1">序列片段 <a class="header-anchor" href="#序列片段" aria-label="Permalink to &quot;序列片段&quot;">​</a></h4><ul><li>循环：如果满足“循环条件”,则重复执行本框中的内容</li><li>条件分支：满足条件 1，则执行条件 1 对应的内容，满足条件 2，则执行条件 2 对应的内容</li><li>可选分支：如果条件满足，则执行框中内容，否则跳过不执行</li></ul><img src="'+h+'"><h3 id="通信图-协作图" tabindex="-1"><strong>通信图</strong>：（协作图） <a class="header-anchor" href="#通信图-协作图" aria-label="Permalink to &quot;**通信图**：（协作图）&quot;">​</a></h3><p><strong>强调对象之间存在消息收发关系，不突出时间顺序</strong></p><h2 id="状态图-考得多" tabindex="-1"><strong>状态图</strong>（考得多） <a class="header-anchor" href="#状态图-考得多" aria-label="Permalink to &quot;**状态图**（考得多）&quot;">​</a></h2><p>对类描述的补充。用于展现此类对象所具有的可能的状态，以及某些时间发生时其状态转移情况</p><img src="'+u+'"><h3 id="活动图" tabindex="-1"><strong>活动图</strong> <a class="header-anchor" href="#活动图" aria-label="Permalink to &quot;**活动图**&quot;">​</a></h3><p>是一种特殊的状态图。活动图描述一个操作中要进行的各项活动的执行流程。同时，也常被用来描述一个用例的处理流程或者某种交互流程。</p><p>活动图将进程或其他计算结构展示为计算内部一步步的控制流和数据流。</p><p>还有泳道活动图，对逻辑梳理有帮助</p><p>类似程序流程图（面向结构化的），活动图支持展示并行行为（两条黑线之间）</p><img src="'+c+'"><h3 id="定时图" tabindex="-1"><strong>定时图</strong> <a class="header-anchor" href="#定时图" aria-label="Permalink to &quot;**定时图**&quot;">​</a></h3><p>也叫计时图，用于展示交互过程中的真实时间信息，具体描述对象状态变化的时间点以及维持特定状态的时间段。</p><img src="'+d+'"><ul><li>交互概览图</li></ul>',46)]))}const f=l(p,[["render",E]]);export{A as __pageData,f as default};
