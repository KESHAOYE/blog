import{_ as e,c as t,ag as r,o}from"./chunks/framework.BxW8Wou5.js";const _=JSON.parse('{"title":"4. XSS和CSRF攻击","description":"","frontmatter":{},"headers":[],"relativePath":"interview/网络/4. XSS和CSRF.md","filePath":"interview/网络/4. XSS和CSRF.md","lastUpdated":1705937785000}'),i={name:"interview/网络/4. XSS和CSRF.md"};function l(s,a,c,n,h,S){return o(),t("div",null,a[0]||(a[0]=[r('<h1 id="_4-xss和csrf攻击" tabindex="-1">4. XSS和CSRF攻击 <a class="header-anchor" href="#_4-xss和csrf攻击" aria-label="Permalink to &quot;4. XSS和CSRF攻击&quot;">​</a></h1><h2 id="xss-跨站脚本攻击" tabindex="-1">XSS 跨站脚本攻击 <a class="header-anchor" href="#xss-跨站脚本攻击" aria-label="Permalink to &quot;XSS 跨站脚本攻击&quot;">​</a></h2><blockquote><p>原理：恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。</p></blockquote><h3 id="手段" tabindex="-1">手段 <a class="header-anchor" href="#手段" aria-label="Permalink to &quot;手段&quot;">​</a></h3><p>将js代码通过输入框等插入网页</p><h3 id="防御" tabindex="-1">防御 <a class="header-anchor" href="#防御" aria-label="Permalink to &quot;防御&quot;">​</a></h3><p>验证输入</p><h2 id="csrf-跨站请求伪造" tabindex="-1">CSRF 跨站请求伪造 <a class="header-anchor" href="#csrf-跨站请求伪造" aria-label="Permalink to &quot;CSRF 跨站请求伪造&quot;">​</a></h2><blockquote><p>原理：攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了</p></blockquote><img src="https://pic3.zhimg.com/80/v2-ce39e4208a89f5ab02b6fe28c2dc56a6_1440w.webp"><h3 id="防御-1" tabindex="-1">防御 <a class="header-anchor" href="#防御-1" aria-label="Permalink to &quot;防御&quot;">​</a></h3><ul><li>设置跨域</li><li>token机制</li><li>cookie的sameSite</li></ul>',12)]))}const p=e(i,[["render",l]]);export{_ as __pageData,p as default};
