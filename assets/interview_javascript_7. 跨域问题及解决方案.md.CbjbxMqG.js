import{_ as a,c as i,ag as t,o as e}from"./chunks/framework.BxW8Wou5.js";const E=JSON.parse('{"title":"7. 跨域及解决方案","description":"","frontmatter":{},"headers":[],"relativePath":"interview/javascript/7. 跨域问题及解决方案.md","filePath":"interview/javascript/7. 跨域问题及解决方案.md","lastUpdated":1705937785000}'),h={name:"interview/javascript/7. 跨域问题及解决方案.md"};function n(l,s,p,r,k,d){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="_7-跨域及解决方案" tabindex="-1">7. 跨域及解决方案 <a class="header-anchor" href="#_7-跨域及解决方案" aria-label="Permalink to &quot;7. 跨域及解决方案&quot;">​</a></h1><h2 id="什么是跨域" tabindex="-1">什么是跨域 <a class="header-anchor" href="#什么是跨域" aria-label="Permalink to &quot;什么是跨域&quot;">​</a></h2><h3 id="同源策略" tabindex="-1">同源策略 <a class="header-anchor" href="#同源策略" aria-label="Permalink to &quot;同源策略&quot;">​</a></h3><p>说到跨域就要先了解什么是同源策略。同源策略是一种安全策略，它会阻止一个域的JS脚本与另一个域的内容进行交互。</p><h3 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h3><p>当一个接口地址的协议、域名、端口号三者之一与当前页面不同即为跨域。</p><table tabindex="0"><thead><tr><th>当前页面URL</th><th>被请求URL</th><th>是否跨域</th><th>原因</th></tr></thead><tbody><tr><td><code>http://www.tjfy.gov.com</code></td><td><code>http://www.tjfy.gov.com/home.html</code></td><td>否</td><td>协议域名端口一致</td></tr><tr><td><code>https://www.tjfy.gov.com</code></td><td><code>http://www.tjfy.gov.com/home.html</code></td><td>是</td><td>协议不一致</td></tr><tr><td><code>http://www.csfy.gov.com</code></td><td><code>http://www.tjfy.gov.com/home.html</code></td><td>是</td><td>主域名不一致</td></tr><tr><td><code>http://www.oauth.tjfy.gov.com</code></td><td><code>http://www.tjfy.gov.com/home.html</code></td><td>是</td><td>子域名不一致</td></tr><tr><td><code>http://www.tjfy.gov.com</code></td><td><code>http://www.tjfy.gov.com/home.html</code></td><td>否</td><td>协议域名端口一致</td></tr></tbody></table><p><strong>跨域是浏览器正常发起请求，服务端正常处理请求，但是浏览器拒绝接受跨域服务器返回的数据</strong></p><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><h3 id="jsonp" tabindex="-1">JSONP <a class="header-anchor" href="#jsonp" aria-label="Permalink to &quot;JSONP&quot;">​</a></h3><h4 id="优缺点" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点" aria-label="Permalink to &quot;优缺点&quot;">​</a></h4><p>优点： 简单适用、兼容性好（低版本IE） 缺点： 只支持GET请求，不支持POST请求</p><h4 id="核心思路及实现" tabindex="-1">核心思路及实现 <a class="header-anchor" href="#核心思路及实现" aria-label="Permalink to &quot;核心思路及实现&quot;">​</a></h4><p>添加一个<code>&lt;script&gt;</code>标签（<strong>script标签没有跨域限制！z</strong>）</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.api.tjfy.gov.com/user/search?name=高&amp;callback=detailSearch&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    function detailSearch(res) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="cors" tabindex="-1">CORS <a class="header-anchor" href="#cors" aria-label="Permalink to &quot;CORS&quot;">​</a></h3><p>整个CORS通信过程都是由浏览器自动完成，不需要用户参与。对于开发者来说也不需要做额外的代码改动，<strong>CORS通信依赖服务端</strong>，只要服务器实现了CORS接口，就可以跨源通信。</p><h4 id="优缺点-1" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点-1" aria-label="Permalink to &quot;优缺点&quot;">​</a></h4><p>优点： 支持各种HTTP METHOD（get、post、put、delete...） 缺点： 兼容性不如JSONP(需要IE10以上浏览器和服务端支持)</p><h4 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h4><p>服务端添加<code>Access-Control-Allow-Origin</code>响应头，并指明可以共享数据的域</p><h3 id="webpack代理-proxy反向代理" tabindex="-1">WebPack代理（proxy反向代理） <a class="header-anchor" href="#webpack代理-proxy反向代理" aria-label="Permalink to &quot;WebPack代理（proxy反向代理）&quot;">​</a></h3><p>基本行为就是接收客户端发送的请求后转发给其他服务器。需要一个中间服务器（webpack-dev-server）</p><h4 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h4><p>通过<code>http-proxy-middleware</code>中间件,实现请求转发给其他服务器。在开发阶段，本地地址为<code>http://localhost:8000</code>,该浏览器发送一个前缀带有/api标识的请求到服务端获取数据，但响应这个请求的服务器只是将请求转发到另一台服务器中</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">onst express </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;express&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http-proxy-middleware&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> express</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.example.org&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, changeOrigin: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// http://localhost:3000/api/foo/bar -&gt; http://www.example.org/api/foo/bar</span></span></code></pre></div><h4 id="实现-1" tabindex="-1">实现 <a class="header-anchor" href="#实现-1" aria-label="Permalink to &quot;实现&quot;">​</a></h4><p>在（vue/vite）.config.js或webpack.config.js中配置</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  devServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://ap.tjfy.gov.com&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        changeOrigin: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pathRewrite: {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;^/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h3 id="nginx反向代理" tabindex="-1">Nginx反向代理 <a class="header-anchor" href="#nginx反向代理" aria-label="Permalink to &quot;Nginx反向代理&quot;">​</a></h3><h3 id="跨文档通信api" tabindex="-1">跨文档通信API <a class="header-anchor" href="#跨文档通信api" aria-label="Permalink to &quot;跨文档通信API&quot;">​</a></h3><p>window.postMessage()</p><h3 id="设置浏览器为可跨域" tabindex="-1">设置浏览器为可跨域 <a class="header-anchor" href="#设置浏览器为可跨域" aria-label="Permalink to &quot;设置浏览器为可跨域&quot;">​</a></h3><p>Google Chrome浏览器 属性 - 目标加上<code>--disable-web-security --user-data-dir=C:\\MyChromeDevUserData，–user-data-dir</code></p>`,34)]))}const c=a(h,[["render",n]]);export{E as __pageData,c as default};
