import{_ as a,c as t,ag as _,o as i}from"./chunks/framework.BxW8Wou5.js";const h=JSON.parse('{"title":"1.展示 10 万条数据到页面上如何才能不卡顿","description":"","frontmatter":{},"headers":[],"relativePath":"interview/项目/1.展示10万条数据到页面上如何优化才能不卡顿（不使用分页）.md","filePath":"interview/项目/1.展示10万条数据到页面上如何优化才能不卡顿（不使用分页）.md","lastUpdated":1737624967000}'),s={name:"interview/项目/1.展示10万条数据到页面上如何优化才能不卡顿（不使用分页）.md"};function r(n,e,o,l,d,p){return i(),t("div",null,e[0]||(e[0]=[_('<h1 id="_1-展示-10-万条数据到页面上如何才能不卡顿" tabindex="-1">1.展示 10 万条数据到页面上如何才能不卡顿 <a class="header-anchor" href="#_1-展示-10-万条数据到页面上如何才能不卡顿" aria-label="Permalink to &quot;1.展示 10 万条数据到页面上如何才能不卡顿&quot;">​</a></h1><h2 id="分页" tabindex="-1">分页 <a class="header-anchor" href="#分页" aria-label="Permalink to &quot;分页&quot;">​</a></h2><p>落地方案：</p><p>后端：接口分页查询， 前端：封装 el-table + 分页器</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h2 id="虚拟列表" tabindex="-1">虚拟列表 <a class="header-anchor" href="#虚拟列表" aria-label="Permalink to &quot;虚拟列表&quot;">​</a></h2><p>落地方案：</p><p>后端：全量返回 前端：封装 virtualList 虚拟列表组件 （采用 InterSectionObserver）</p>',8)]))}const u=a(s,[["render",r]]);export{h as __pageData,u as default};
