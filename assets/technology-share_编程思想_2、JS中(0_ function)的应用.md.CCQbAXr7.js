import{_ as i,c as a,ag as n,o as t}from"./chunks/framework.BxW8Wou5.js";const E=JSON.parse('{"title":"JS中(0, function)的应用","description":"","frontmatter":{},"headers":[],"relativePath":"technology-share/编程思想/2、JS中(0, function)的应用.md","filePath":"technology-share/编程思想/2、JS中(0, function)的应用.md","lastUpdated":1705937785000}'),h={name:"technology-share/编程思想/2、JS中(0, function)的应用.md"};function l(e,s,p,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="js中-0-function-的应用" tabindex="-1">JS中<code>(0, function)</code>的应用 <a class="header-anchor" href="#js中-0-function-的应用" aria-label="Permalink to &quot;JS中\`\`\`(0, function)\`\`\`的应用&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>在阅读<a href="https://v3.ice.work/" target="_blank" rel="noreferrer">@alibaba/ice</a>的源码时，发现了<code>(0,function)(params)</code>这种写法，满头雾水，便查阅了相关资料。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ice中的使用（例子）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tarballURL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ice_npm_utils_1.getNpmTarball)(scaffoldNpmName, version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;latest&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, registry);</span></span></code></pre></div><h2 id="疑问" tabindex="-1">疑问 <a class="header-anchor" href="#疑问" aria-label="Permalink to &quot;疑问&quot;">​</a></h2><ul><li>为什么要使用这种写法？</li><li>为什么是<code>(0,function)</code>而不是<code>(1, function)</code>？</li></ul><h2 id="解答" tabindex="-1">解答 <a class="header-anchor" href="#解答" aria-label="Permalink to &quot;解答&quot;">​</a></h2><h3 id="_1-为什么要使用这种写法" tabindex="-1">1. 为什么要使用这种写法？ <a class="header-anchor" href="#_1-为什么要使用这种写法" aria-label="Permalink to &quot;1. 为什么要使用这种写法？&quot;">​</a></h3><p>实践出真知，在浏览器环境下对上述代码进行模拟。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ice_npm_utils</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getNpmTarball</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">npmName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">registry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`当前this指向: \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // console.log(npmName, version, registry)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 直接调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ice_npm_utils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNpmTarball</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@ice/antd-pro-scaffold&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;latest&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://registry.npmmirror.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // IIFE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (ice_npm_utils.getNpmTarball)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@ice/antd-pro-scaffold&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;latest&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://registry.npmmirror.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // (0, function)方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ice_npm_utils.getNpmTarball)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@ice/antd-pro-scaffold&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;latest&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://registry.npmmirror.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="运行结果" tabindex="-1">运行结果 <a class="header-anchor" href="#运行结果" aria-label="Permalink to &quot;运行结果&quot;">​</a></h4><p>可以看到<code>(0,function)</code>更改了函数的this指向为window，即全局</p><h3 id="_2-为什么是-0-function-而不是-1-function" tabindex="-1">2. 为什么是(0,function)而不是(1,function) <a class="header-anchor" href="#_2-为什么是-0-function-而不是-1-function" aria-label="Permalink to &quot;2. 为什么是(0,function)而不是(1,function)&quot;">​</a></h3><p><strong>答案是：可以替换为(1,function)，甚至还可以是2、3、4、5...。</strong></p><h4 id="原因" tabindex="-1">原因 <a class="header-anchor" href="#原因" aria-label="Permalink to &quot;原因&quot;">​</a></h4><p>这其实是JS中的逗号运算符。逗号运算符可以实现连续运算，并返回最后一个参数的值（即getNpmTarball的返回值）。</p><h2 id="思考" tabindex="-1">思考 <a class="header-anchor" href="#思考" aria-label="Permalink to &quot;思考&quot;">​</a></h2><p>说到改变this指向，我们首先想到的肯定是call/apply/bind这些方法，那为何源码中要使用这种写法呢？</p><h3 id="猜测" tabindex="-1">猜测 <a class="header-anchor" href="#猜测" aria-label="Permalink to &quot;猜测&quot;">​</a></h3><p>源码中可能对call/apply/bind使用猴子补丁，污染了原型。所以只能用上述方法来改变this指向。建议开发者在开发过程中还是慎用猴子补丁！</p>`,20)]))}const c=i(h,[["render",l]]);export{E as __pageData,c as default};
