import{_ as t,c as r,ag as o,o as e}from"./chunks/framework.BxW8Wou5.js";const h=JSON.parse('{"title":"8、软件维护","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/系统架构师/第3章 - 软件工程/8.软件维护.md","filePath":"ruankao/系统架构师/第3章 - 软件工程/8.软件维护.md","lastUpdated":1746770091000}'),l={name:"ruankao/系统架构师/第3章 - 软件工程/8.软件维护.md"};function n(i,a,s,_,d,c){return e(),r("div",null,a[0]||(a[0]=[o('<h1 id="_8、软件维护" tabindex="-1">8、软件维护 <a class="header-anchor" href="#_8、软件维护" aria-label="Permalink to &quot;8、软件维护&quot;">​</a></h1><h2 id="影响软件可维护性的因素" tabindex="-1">影响软件可维护性的因素 <a class="header-anchor" href="#影响软件可维护性的因素" aria-label="Permalink to &quot;影响软件可维护性的因素&quot;">​</a></h2><ul><li><strong>【可理解性】</strong>：是指通过阅读源代码和相关文档，了解软件的功能和如何运行的容易程度</li><li><strong>【可修改性】</strong>：是指修改软件的难易程度</li><li><strong>【可测试性】</strong>：是指验证软件程序正确的难易程度。 可测试性好的软件，通常意味着软件设计简单、复杂性低。因为软件的复杂性越大，测试的难度也就越大</li><li>【可靠性】：一个软件的可靠性越高，需要维护的概率就越低</li><li>【可移植性】：是指将软件从一个环境一直到新的环境下正确运行的难易程度。软件运行环境的变化是软件维护的一种常见情形，可移植性好的软件会降低维护的概率。</li></ul><h2 id="软件维护的类型" tabindex="-1">软件维护的类型 <a class="header-anchor" href="#软件维护的类型" aria-label="Permalink to &quot;软件维护的类型&quot;">​</a></h2><ul><li>正确性维护【修 BUG】：<strong>识别和纠正软件错误/缺陷</strong>，测试不可能发现所有错误</li><li>适应性维护【应变】：指使应用软件<strong>适应环境变化</strong>【外部环境、数据环境】而进行的修改，变化包括硬件升级、操作系统更新、数据库版本升级、新的法律法规、政策变化</li><li>完善性维护【新需求】：<strong>扩充功能和改善性能</strong>而进行的修改等。</li><li>预防性维护【针对未来】：为了<strong>适应未来</strong>的软硬件环境的变化，应主动增加预防性的新的功能，以使用系统适应各类变化而不被淘汰。经典案例：【专用】改为【通用】</li></ul>',5)]))}const g=t(l,[["render",n]]);export{h as __pageData,g as default};
