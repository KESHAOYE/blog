import{_ as i,c as a,ag as l,o as n}from"./chunks/framework.BxW8Wou5.js";const t="/blog/picture/%E6%B5%AE%E5%8A%A8%E7%9B%92%E5%AD%90%E6%8D%A2%E8%A1%8C.png",h="/blog/picture/%E6%B5%AE%E5%8A%A8%E7%9B%92%E5%AD%90%E9%A1%B6%E8%BE%B9%E4%B8%8D%E8%83%BD%E8%B6%85%E8%BF%87%E4%B8%8A%E4%B8%80%E4%B8%AA%E7%9B%92%E5%AD%90.jpg",c=JSON.parse('{"title":"CSS视觉格式化模型","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-basic/css/css视觉格式化模型.md","filePath":"frontend-basic/css/css视觉格式化模型.md","lastUpdated":1705937785000}'),p={name:"frontend-basic/css/css视觉格式化模型.md"};function k(e,s,r,E,d,g){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="css视觉格式化模型" tabindex="-1">CSS视觉格式化模型 <a class="header-anchor" href="#css视觉格式化模型" aria-label="Permalink to &quot;CSS视觉格式化模型&quot;">​</a></h1><p>盒模型：规定单个盒子的规则</p><p>视觉格式化模型：页面上多个盒子的排列（布局）规则</p><p>视觉格式化模型，大体上将页面中盒子的排列分为三种方式：</p><ol><li>常规流</li><li>浮动</li><li>定位</li></ol><h2 id="常规-普通-流" tabindex="-1">常规(普通)流 <a class="header-anchor" href="#常规-普通-流" aria-label="Permalink to &quot;常规(普通)流&quot;">​</a></h2><p>常规流又称文档流、普通文档流、常规文档流</p><p>所有元素默认下，都属于常规流布局</p><p>总体规则：块盒独占一行，行盒水平依次排列</p><h3 id="包含块-containing-block" tabindex="-1">包含块（containing block）： <a class="header-anchor" href="#包含块-containing-block" aria-label="Permalink to &quot;包含块（containing block）：&quot;">​</a></h3><p>每个盒子都有它的<strong>包含块</strong>，包含块决定了盒子的排列区域。</p><p>绝大部分情况下：盒子的包含块是父元素的<strong>内容盒</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 在下面这个例子中，child的包含块是parent的内容盒（content-box） --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;parent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;child&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="块盒" tabindex="-1">块盒 <a class="header-anchor" href="#块盒" aria-label="Permalink to &quot;块盒&quot;">​</a></h3><br><h4 id="_1-每个块盒的总宽度必须等于包含块的宽度" tabindex="-1">1. 每个块盒的总宽度必须等于包含块的宽度 <a class="header-anchor" href="#_1-每个块盒的总宽度必须等于包含块的宽度" aria-label="Permalink to &quot;1. 每个块盒的总宽度必须等于包含块的宽度&quot;">​</a></h4><p>宽度的默认值是auto（吸收剩余水平空间）</p><p>margin（默认为0）的取值也可以是auto，；</p><p>当width和margin都是auto时，宽度吸收能力强于margin</p><p>若宽度、边框（border）、内边距（padding）、外边距（margin）计算后，仍有剩余空间，该剩余空间全部被margin-right吸收</p><p>在常规流中，块盒在其包含块中<strong>居中</strong>，可以定宽，设置左右margin值为auto</p><h4 id="_2-每个块盒垂直方向上的auto" tabindex="-1">2. 每个块盒垂直方向上的auto <a class="header-anchor" href="#_2-每个块盒垂直方向上的auto" aria-label="Permalink to &quot;2. 每个块盒垂直方向上的auto&quot;">​</a></h4><p>设置height：auto（根据内容决定高度）</p><p>垂直方向设置margin:auto, 表示margin为0</p><h4 id="_3-百分比取值" tabindex="-1">3. 百分比取值 <a class="header-anchor" href="#_3-百分比取值" aria-label="Permalink to &quot;3. 百分比取值&quot;">​</a></h4><p>padding、宽高、margin可以取值为百分比</p><p>横向百分比都相对于包含块的宽度</p><p><strong>高度的百分比有两种情况：</strong></p><p>1）若包含块的高度取决于子元素的高度，设置百分比无效</p><p>2）若包含块的高度不取决于子元素的高度，百分比相对于包含块（父元素）的高度</p><h4 id="_4-上下外边距的合并" tabindex="-1">4.上下外边距的合并 <a class="header-anchor" href="#_4-上下外边距的合并" aria-label="Permalink to &quot;4.上下外边距的合并&quot;">​</a></h4><p>两个常规流块盒，上下外边距相邻(不止兄弟元素，父子元素也会发生合并,border也会阻隔相邻)，会进行合并（取较大值合并）。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**预想中子元素与父元素有边距，实际为0，合并了 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .father</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    margin-top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .son</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    margin-top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;father&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;son&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="浮动" tabindex="-1">浮动 <a class="header-anchor" href="#浮动" aria-label="Permalink to &quot;浮动&quot;">​</a></h2><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ol><li>文字环绕</li><li>横向排列</li></ol><h3 id="浮动的基本特点" tabindex="-1">浮动的基本特点 <a class="header-anchor" href="#浮动的基本特点" aria-label="Permalink to &quot;浮动的基本特点&quot;">​</a></h3><p>修改float属性值为:</p><ul><li>left: 左浮动，元素靠上靠左</li><li>right： 右浮动，元素靠上靠右</li></ul><blockquote><p>浮动的兼容性好（IE5以上）,默认值为none</p></blockquote><ol><li>当一个元素浮动后，<strong>元素必定为块盒</strong>（更改display属性为块盒(block)）</li><li>浮动元素的包含块和常规流一样（<strong>包含块为父元素的内容盒</strong>）</li></ol><h3 id="盒子尺寸" tabindex="-1">盒子尺寸 <a class="header-anchor" href="#盒子尺寸" aria-label="Permalink to &quot;盒子尺寸&quot;">​</a></h3><ol><li>宽度为auto时，适应内容宽度</li><li>高度为auto时，与常规流一致（<strong>高度为auto时,根据内容决定高度</strong>）</li><li>margin设置为auto时，margin值为0</li><li>边框、内边距百分比设置与常规流一致</li></ol><h3 id="盒子排列-位置" tabindex="-1">盒子排列（位置） <a class="header-anchor" href="#盒子排列-位置" aria-label="Permalink to &quot;盒子排列（位置）&quot;">​</a></h3><ol><li>左浮动的盒子靠上靠左排列（左上）</li><li>右浮动的盒子靠上靠右排列（右上）</li><li>在包含块中排列时，会避开常规流盒子（常规流盒子在前，浮动盒子在后）</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- floatBox会避开noraml，直接排列在noraml下面 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;container&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;normal&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;常规流盒子&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;floatBox&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;浮动盒子&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;floatBox&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;浮动盒子&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="4"><li>常规流盒子在排列时，无视浮动盒</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- normal会无视floatbox，直接排列在floatbox下一层(浮动盒子在常规流盒子上面) --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;container&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;floatBox&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;浮动盒子&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;floatBox&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;浮动盒子&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;normal&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;常规流盒子&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="6"><li>行盒在排列时，会避开浮动盒子(<strong>排在浮动盒子后面</strong>)</li><li>外边距（margin）合并不会发生</li><li>若剩余空间无法放下浮动的盒子，则该盒子向下移动，直到具备足够的空间能容纳盒子，然后再向左或向右移动</li></ol><p><strong>下图中，3盒宽度过宽，所以先向下移动到第二行，在左移动</strong><img src="`+t+'"></p><ol start="9"><li>浮动盒子的顶边不能高于上一个盒子的顶边</li></ol><p><strong>下图中，4盒为右浮动 不能在第一行 顶边只能与3齐平</strong><img src="'+h+`"></p><blockquote><p>如果文字没有在行盒中，浏览器会直接生成一个行盒来包裹文字，该行盒叫做匿名行盒</p></blockquote><h3 id="高度坍塌" tabindex="-1">高度坍塌 <a class="header-anchor" href="#高度坍塌" aria-label="Permalink to &quot;高度坍塌&quot;">​</a></h3><h4 id="什么是高度坍塌" tabindex="-1">什么是高度坍塌 <a class="header-anchor" href="#什么是高度坍塌" aria-label="Permalink to &quot;什么是高度坍塌&quot;">​</a></h4><p>一般是父元素未设置高度时（由子元素撑起），子元素为浮动元素，会造成高度坍塌。</p><img src="https://img-blog.csdnimg.cn/9be886b9edc1456cb7b0720abe1405ae.png#pic_center"><p>高度坍塌的根源：常规流盒子在自动计算高度时，会忽略浮动盒子</p><p>解决方法：清除浮动，涉及CSS属性：</p><ul><li>默认值：none</li><li>left：清除左浮动，该元素必须出现在前面所有左浮动盒子的下方。</li><li>right：清除右浮动，该元素必须出现在前面所有右浮动盒子的下方。</li><li>both：清除所有浮动，该元素必须出现在前面所有浮动盒子的下方。</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.clearfix::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.son</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="定位" tabindex="-1">定位 <a class="header-anchor" href="#定位" aria-label="Permalink to &quot;定位&quot;">​</a></h2><p>手动控制元素在包含块中的精准位置</p><p><strong>涉及的CSS属性：position</strong></p><h3 id="position" tabindex="-1">position <a class="header-anchor" href="#position" aria-label="Permalink to &quot;position&quot;">​</a></h3><ul><li>默认值：static，静态定位（不定位）</li><li>relative：相对定位</li><li>absolute：绝对定位</li><li>fixed：固定定位</li></ul><p><strong>定位元素会脱离常规流</strong>（相对定位-position：relative除外）</p><p>一个脱离了文档流的元素：</p><ol><li>文档流中的元素摆放时，会忽略脱离文档流的元素</li><li>文档流中元素计算自动高度时，会忽略脱离文档流的元素</li></ol><h3 id="相对定位-relative" tabindex="-1">相对定位（relative） <a class="header-anchor" href="#相对定位-relative" aria-label="Permalink to &quot;相对定位（relative）&quot;">​</a></h3><p><strong>不会导致元素脱离文档流</strong>，只是让元素在原来位置上发生偏移</p><p>可以通过四个CSS属性设置其位置(<strong>上下发生矛盾以上边为主，左右发生矛盾以左边为主</strong>)</p><ul><li>left</li><li>right</li><li>top</li><li>bottom</li></ul><p>盒子的偏移不会对其他盒子产生影响</p><h3 id="绝对定位-absolute" tabindex="-1">绝对定位(absolute) <a class="header-anchor" href="#绝对定位-absolute" aria-label="Permalink to &quot;绝对定位(absolute)&quot;">​</a></h3><ol><li>宽高为auto，适应内容</li><li>包含块变化：找祖先元素中第一个定位元素（position非static的元素），若找不到，则它的包含块为整个网页</li><li>根据包含块定位（left、right、top、bottom）</li></ol><h3 id="固定定位-fixed" tabindex="-1">固定定位(fixed) <a class="header-anchor" href="#固定定位-fixed" aria-label="Permalink to &quot;固定定位(fixed)&quot;">​</a></h3><p>其他情况和绝对定位一样</p><p>包含块不同：固定为视口（浏览器的可视窗口）</p><h2 id="定位下的居中" tabindex="-1">定位下的居中 <a class="header-anchor" href="#定位下的居中" aria-label="Permalink to &quot;定位下的居中&quot;">​</a></h2><p>某个方向居中：</p><ol><li>定宽（高）</li><li>将左右（上下）距离设为0</li><li>将左右（上下）margin设置为auto</li></ol><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .middle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>绝对定位和固定定位中，margin设置为auto时会自动吸收剩余空间</p><h2 id="多个定位元素重叠" tabindex="-1">多个定位元素重叠 <a class="header-anchor" href="#多个定位元素重叠" aria-label="Permalink to &quot;多个定位元素重叠&quot;">​</a></h2><p>堆叠上下文</p><p>设置z-index，通常情况下，该值越大，越靠近用户</p><p>只有定位元素设置z-index有效</p><p>z-index可以是负数，<strong>如果是负数，则遇到常规流和浮动元素，则会覆盖</strong></p><h2 id="补充" tabindex="-1">补充 <a class="header-anchor" href="#补充" aria-label="Permalink to &quot;补充&quot;">​</a></h2><ul><li>绝对定位(relative)、固定定位(fixed)元素一定是块盒</li><li>绝对定位、固定定位元素一定不是浮动</li><li>没有外边距合并</li></ul>`,92)]))}const y=i(p,[["render",k]]);export{c as __pageData,y as default};
