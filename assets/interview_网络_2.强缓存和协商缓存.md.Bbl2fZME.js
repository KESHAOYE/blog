import{_ as e,c as o,ag as t,o as c}from"./chunks/framework.BxW8Wou5.js";const u=JSON.parse('{"title":"2. 强缓存和协商缓存","description":"","frontmatter":{},"headers":[],"relativePath":"interview/网络/2.强缓存和协商缓存.md","filePath":"interview/网络/2.强缓存和协商缓存.md","lastUpdated":1705937785000}'),l={name:"interview/网络/2.强缓存和协商缓存.md"};function r(i,a,d,n,h,s){return c(),o("div",null,a[0]||(a[0]=[t('<h1 id="_2-强缓存和协商缓存" tabindex="-1">2. 强缓存和协商缓存 <a class="header-anchor" href="#_2-强缓存和协商缓存" aria-label="Permalink to &quot;2. 强缓存和协商缓存&quot;">​</a></h1><p>为了减少请求资源的次数，加快资源访问速度。浏览器会对图片、CSS、JS文件等进行缓存。缓存策略分为<strong>强缓存</strong>和<strong>协商缓存</strong></p><h2 id="强缓存" tabindex="-1">强缓存 <a class="header-anchor" href="#强缓存" aria-label="Permalink to &quot;强缓存&quot;">​</a></h2><p>强缓存可以理解为强制缓存（服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求，使用本地缓存的话则不会发送请求到服务器，从而达到减轻服务器访问压力的作用，且由于直接从本地缓存读取资源文件，大大提高了加载速度。）</p><h3 id="流程" tabindex="-1">流程 <a class="header-anchor" href="#流程" aria-label="Permalink to &quot;流程&quot;">​</a></h3><ul><li><p>浏览器第一次请求远程服务器资源时，如果服务器希望浏览器得到该资源后一段时间内不要再发送请求过来，则服务器可以通过在响应头里设置<code>Cache-Control: max-age=31536000</code>(max-age代表缓存时间，时间为秒)</p></li><li><p>再次请求时，如果是从缓存中取资源的话状态码200后面会表明情况（<code>from disk cache</code>、<code>from memory cache</code>） <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a496f3c85ad4a19b541a9d3d9651220~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp"></p></li></ul><blockquote><p>一般来说，浏览器会将较大的资源缓存到disk cache，而较小的资源则被缓存到memory cache里。内存缓存与磁盘缓存相比，访问速度要更快一些！</p></blockquote><h3 id="cache-control" tabindex="-1">cache-control <a class="header-anchor" href="#cache-control" aria-label="Permalink to &quot;cache-control&quot;">​</a></h3><p><code>cache-control</code>除了max-age外，还可以设置其他值</p><ul><li>no-cache: 不使用强缓存（会使用协商缓存）</li><li>no-store：不使用缓存（不使用强缓存也不使用协商缓存），每次都向服务器发送资源请求。</li><li>private：只允许客户端使用缓存，不允许其他代理服务器进行缓存。</li><li>public：客户端和代理服务器都可缓存。</li><li>s-maxage：与max-age类似，区别是s-maxage是设定代理服务器的缓存时间。</li></ul><h2 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-label="Permalink to &quot;协商缓存&quot;">​</a></h2><p>强缓存由浏览器决定是否使用缓存，而协商缓存则是由服务器来告诉浏览器是否使用缓存资源</p><h3 id="流程-1" tabindex="-1">流程 <a class="header-anchor" href="#流程-1" aria-label="Permalink to &quot;流程&quot;">​</a></h3><ul><li>浏览器初次请求资源，服务器返回资源，同时生成一个<code>Etag</code>值携带在响应头里返回给浏览器，当浏览器再次请求资源时会在请求头里携带<code>If-None-Match</code>，值是之前服务器返回的<code>Etag</code>的值，服务器收到之后拿该值与资源文件最新的<code>Etag</code>值做对比。 <ul><li>没发生变化，返回304，告诉浏览器使用缓存</li><li>否则返回200和最新的文件给浏览器使用</li></ul></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>强缓存优先级大于协商缓存（两者同时存在时，如果强缓存开启且在有效期内，则不会走协商缓存。）</p>',16)]))}const _=e(l,[["render",r]]);export{u as __pageData,_ as default};
