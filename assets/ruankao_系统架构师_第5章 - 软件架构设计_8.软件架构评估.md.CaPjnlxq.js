import{_ as r,c as t,ag as o,o as e}from"./chunks/framework.BxW8Wou5.js";const i="/blog/picture/%E8%BD%AF%E8%80%83/%E6%9D%83%E8%A1%A1%E7%82%B9%E5%B9%B3%E8%A1%A1%E5%85%B3%E7%B3%BB.png",n="/blog/picture/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95.png",l="/blog/picture/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95-%E5%9F%BA%E4%BA%8E%E5%9C%BA%E6%99%AF-%E7%A4%BA%E4%BE%8B.png",s="/blog/picture/%E8%BD%AF%E8%80%83/%E5%8F%AF%E7%94%A8%E6%80%A7%E8%B4%A8%E9%87%8F%E5%B1%9E%E6%80%A7%E5%9C%BA%E6%99%AF%E6%8F%8F%E8%BF%B0.png",E="/blog/picture/%E8%BD%AF%E8%80%83/%E5%8F%AF%E4%BF%AE%E6%94%B9%E6%80%A7%E8%B4%A8%E9%87%8F%E5%B1%9E%E6%80%A7%E5%9C%BA%E6%99%AF%E6%8F%8F%E8%BF%B0.png",h="/blog/picture/%E8%BD%AF%E8%80%83/%E6%80%A7%E8%83%BD%E8%B4%A8%E9%87%8F%E5%B1%9E%E6%80%A7%E5%9C%BA%E6%99%AF%E6%8F%8F%E8%BF%B0.png",p="/blog/picture/%E8%BD%AF%E8%80%83/%E5%8F%AF%E6%B5%8B%E8%AF%95%E6%80%A7%E8%B4%A8%E9%87%8F%E5%B1%9E%E6%80%A7%E5%9C%BA%E6%99%AF%E6%8F%8F%E8%BF%B0.png",c="/blog/picture/%E8%BD%AF%E8%80%83/%E6%98%93%E7%94%A8%E6%80%A7%E8%B4%A8%E9%87%8F%E5%B1%9E%E6%80%A7%E5%9C%BA%E6%99%AF%E6%8F%8F%E8%BF%B0.png",A="/blog/picture/%E8%BD%AF%E8%80%83/%E5%AE%89%E5%85%A8%E6%80%A7%E8%B4%A8%E9%87%8F%E5%B1%9E%E6%80%A7%E5%9C%BA%E6%99%AF%E6%8F%8F%E8%BF%B0.png",B="/blog/picture/%E8%BD%AF%E8%80%83/SAAM.png",d="/blog/picture/%E8%BD%AF%E8%80%83/ATAM.png",g="/blog/picture/%E8%BD%AF%E8%80%83/%E8%B4%A8%E9%87%8F%E6%95%88%E7%94%A8%E6%A0%91.png",P=JSON.parse('{"title":"8.软件架构评估","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/系统架构师/第5章 - 软件架构设计/8.软件架构评估.md","filePath":"ruankao/系统架构师/第5章 - 软件架构设计/8.软件架构评估.md","lastUpdated":1747028136000}'),u={name:"ruankao/系统架构师/第5章 - 软件架构设计/8.软件架构评估.md"};function m(b,a,F,_,q,f){return e(),t("div",null,a[0]||(a[0]=[o('<h1 id="_8-软件架构评估" tabindex="-1">8.软件架构评估 <a class="header-anchor" href="#_8-软件架构评估" aria-label="Permalink to &quot;8.软件架构评估&quot;">​</a></h1><h2 id="为什么要进行软件架构评估" tabindex="-1">为什么要进行软件架构评估 <a class="header-anchor" href="#为什么要进行软件架构评估" aria-label="Permalink to &quot;为什么要进行软件架构评估&quot;">​</a></h2><p>软件架构评估是针对软件架构的层级进行的评估，即对软件开发的高层级进行评估</p><h2 id="架构评估到底评估什么" tabindex="-1">架构评估到底评估什么 <a class="header-anchor" href="#架构评估到底评估什么" aria-label="Permalink to &quot;架构评估到底评估什么&quot;">​</a></h2><p>看最终设计的架构是否满足需求（更注重非功能需求）</p><h2 id="架构评估怎么评" tabindex="-1">架构评估怎么评 <a class="header-anchor" href="#架构评估怎么评" aria-label="Permalink to &quot;架构评估怎么评&quot;">​</a></h2><p>涉及一些方法论，用基于场景的架构评估方法论用的比较多</p><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><h3 id="敏感点-和别的相比受刺激后对系统产生更大影响" tabindex="-1">敏感点（和别的相比受刺激后对系统产生更大影响） <a class="header-anchor" href="#敏感点-和别的相比受刺激后对系统产生更大影响" aria-label="Permalink to &quot;敏感点（和别的相比受刺激后对系统产生更大影响）&quot;">​</a></h3><p>是一个或多个构件（和/或构件之间的关系）的特性。</p><h3 id="权衡点-是一种敏感点" tabindex="-1">权衡点（是一种敏感点） <a class="header-anchor" href="#权衡点-是一种敏感点" aria-label="Permalink to &quot;权衡点（是一种敏感点）&quot;">​</a></h3><p>是影响多个质量属性的特性，是多个质量属性的敏感点。<strong>例如提升安全性能，性能就会下降（安全和性能是一个矛盾点，找到中和点就是权衡点）</strong></p><img src="'+i+'"> （+表示正相关，-表示负相关， 例如负相关中性能提升，安全性下降） <h3 id="风险点-带来隐患" tabindex="-1">风险点（带来隐患） <a class="header-anchor" href="#风险点-带来隐患" aria-label="Permalink to &quot;风险点（带来隐患）&quot;">​</a></h3><p>是指架构设计中潜在的、存在问题的架构决策所带来的隐患</p><h3 id="非风险点-没有带来隐患" tabindex="-1">非风险点（没有带来隐患） <a class="header-anchor" href="#非风险点-没有带来隐患" aria-label="Permalink to &quot;非风险点（没有带来隐患）&quot;">​</a></h3><p>是指不会带来隐患，一般以“XXX 要求是可以实现（或接受）的”方式表达。</p><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><ul><li>对交易请求处理时间的要求将影响系统的数据传输协议和处理过程的设计 - 敏感点（影响属性的单一方面）</li><li>假设每秒钟用户交易请求的数量是 10 个，处理请求的时间为 30 毫秒，则“在 1 秒内完成用户的交易请求”这一要求是可以实现的 - 非风险点</li><li>目前对系统信用卡支付业务逻辑的描述尚未达成共识，这可能导致部分业务功能模块的重复，影响系统的可修改性 - 风险点</li><li>更改加密的级别将对安全性和性能产生影响 - 权衡点</li></ul><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><img src="'+n+'"><ul><li>基于调查问卷的方式</li><li>基于度量的方式：注重数据化</li></ul><h3 id="基于场景的方式" tabindex="-1"><strong>基于场景的方式</strong>： <a class="header-anchor" href="#基于场景的方式" aria-label="Permalink to &quot;**基于场景的方式**：&quot;">​</a></h3><p><strong>【质量属性场景】<strong>是从</strong>风险承担者</strong>的角度与系统交互的简短描述，它通常作为<strong>描述质量属性的手段</strong></p><h4 id="六个方面" tabindex="-1">六个方面 <a class="header-anchor" href="#六个方面" aria-label="Permalink to &quot;六个方面&quot;">​</a></h4><p>三个方面为：刺激、环境、响应</p><p>场景可从六个方面进行描述</p><ul><li>刺激源【Source】：是某个生成该刺激的实体（人、计算机脚本或者其他任何刺激器）</li><li><strong>刺激</strong>【Stimulus】：该刺激是当<strong>刺激到达系统时需要考虑的条件</strong></li><li>制品【Artifact】：某个制品被激励。这可能是<strong>整个系统（或系统的一部分）</strong></li><li><strong>环境</strong>【Environment】:该刺激在某些条件内发生。当激励发生时，系统可能处于<strong>过载、运行</strong>或者其他情况</li><li><strong>响应</strong>【Response】:该响应是在激励到达后所采取的行动</li><li>响应度量【Measurement】:当响应发生时，应当能够以某种方式对其进行度量，以对需求进行测试</li></ul><img src="'+l+'"><h4 id="场景描述" tabindex="-1">场景描述 <a class="header-anchor" href="#场景描述" aria-label="Permalink to &quot;场景描述&quot;">​</a></h4><h5 id="可用性属性质量场景描述" tabindex="-1">可用性属性质量场景描述 <a class="header-anchor" href="#可用性属性质量场景描述" aria-label="Permalink to &quot;可用性属性质量场景描述&quot;">​</a></h5><p>有多少时间百分比是正常运行的状态</p><img src="'+s+'"><p><strong>例子</strong>：系统能够连续运行的时间不小于 1000 小时，闪退后能够在 15S 内自动重启</p><p>其中，系统是刺激源，闪退是刺激，系统是制品，正常操作（系统正常运行的状态）是环境，自动重启是响应，15S 内重启是响应度量</p><h5 id="可修改性属性质量场景描述" tabindex="-1">可修改性属性质量场景描述 <a class="header-anchor" href="#可修改性属性质量场景描述" aria-label="Permalink to &quot;可修改性属性质量场景描述&quot;">​</a></h5><p>以较高性价比完成系统的修改</p><img src="'+E+'"><p><strong>例子</strong>：更改 WEB 界面接口必须在 2 人周内完成</p><p>其中，发出更改请求的人（用户）是刺激源，更改 WEB 界面接口是刺激，WEB 界面接口相关的是制品，（没有环境，要素缺乏）是环境，完成更改 是响应，2 人周内是响应度量</p><h5 id="性能质量属性场景描述" tabindex="-1">性能质量属性场景描述 <a class="header-anchor" href="#性能质量属性场景描述" aria-label="Permalink to &quot;性能质量属性场景描述&quot;">​</a></h5><img src="'+h+'"><p><strong>例子</strong>：正常负载下，系统必须在 0.5 秒内对用户的交易请求进行响应</p><p>其中，用户请求是刺激源，交易请求是刺激，系统是制品，正常模式是环境，完成请求是响应，0.5 秒内是响应度量</p><h5 id="可测试性质量属性场景描述" tabindex="-1">可测试性质量属性场景描述 <a class="header-anchor" href="#可测试性质量属性场景描述" aria-label="Permalink to &quot;可测试性质量属性场景描述&quot;">​</a></h5><img src="'+p+'"><p><strong>例子</strong>：测试人员在开发期间针对一个代码单元，执行一个测试序列，获取结果，并在 20 分钟内完成测试</p><p>其中，是测试人员是刺激源，执行测试序列是刺激，代码单元是制品，开发时是环境，完成测试是响应，20 分钟内是响应度量</p><h5 id="易用性质量属性场景描述" tabindex="-1">易用性质量属性场景描述 <a class="header-anchor" href="#易用性质量属性场景描述" aria-label="Permalink to &quot;易用性质量属性场景描述&quot;">​</a></h5><img src="'+c+'"><p><strong>例子</strong>：新用户学习使用系统时间不超过 2 小时</p><p>其中，新用户是刺激源，学习使用系统是刺激，系统运行时是环境，系统是制品，学会使用系统是响应，不超过 2 小时是响应度量</p><h5 id="安全性质量属性场景描述" tabindex="-1">安全性质量属性场景描述 <a class="header-anchor" href="#安全性质量属性场景描述" aria-label="Permalink to &quot;安全性质量属性场景描述&quot;">​</a></h5><img src="'+A+'"><p><strong>例子</strong>：信用卡支付必须保证 99.9999%的安全性</p><p>其中，用户/消费者/信用卡持卡人是刺激源，是信用卡支付刺激，正常运行的环境是环境，系统中安全服务是制品，安全响应支付是响应，99.9999%是响应度量</p><h4 id="saam-软件架构分析法" tabindex="-1"><strong>SAAM 软件架构分析法</strong> <a class="header-anchor" href="#saam-软件架构分析法" aria-label="Permalink to &quot;**SAAM 软件架构分析法**&quot;">​</a></h4><p>最早关注可修改性，后扩充到可移植性、可扩充性等。 <strong>最早</strong>形成文档并得到广泛使用的软件架构分析方法</p><img src="'+B+'"><h4 id="atam-架构权衡分析法" tabindex="-1"><strong>ATAM 架构权衡分析法</strong> <a class="header-anchor" href="#atam-架构权衡分析法" aria-label="Permalink to &quot;**ATAM 架构权衡分析法**&quot;">​</a></h4><p>从 SAAM 发展而来，主要针对：<strong>性能、实用性、安全性、可修改性</strong> 在系统开发之前，对<strong>这些质量属性进行评价和折中（综合平衡）</strong> 不是一种精准的评估工具</p><p>主要关注系统的<strong>需求说明</strong></p><img src="'+d+'"><h4 id="cbam-成本效益分析法" tabindex="-1">CBAM 成本效益分析法 <a class="header-anchor" href="#cbam-成本效益分析法" aria-label="Permalink to &quot;CBAM 成本效益分析法&quot;">​</a></h4><p>在 ATAM 基础上建立的，软件的“经济“模型</p><h4 id="质量-属性-效用树" tabindex="-1">质量（属性）效用树 <a class="header-anchor" href="#质量-属性-效用树" aria-label="Permalink to &quot;质量（属性）效用树&quot;">​</a></h4><img src="'+g+'"><ul><li>根节点：效用</li><li>质量属性：构成效用树的辅助级别</li></ul><p>树形结构从根节点到叶子节点：树根、质量属性、属性分类、质量属性场景</p>',70)]))}const x=r(u,[["render",m]]);export{P as __pageData,x as default};
