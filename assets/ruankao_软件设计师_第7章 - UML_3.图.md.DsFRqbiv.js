import{_ as i,c as a,ag as e,o as t}from"./chunks/framework.BxW8Wou5.js";const r="/blog/picture/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%B1%BB.png",o="/blog/picture/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/UML%E7%B1%BB%E5%9B%BE.png",E="/blog/picture/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/UML%E5%AF%B9%E8%B1%A1%E5%9B%BE.png",n="/blog/picture/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/UML%E7%94%A8%E4%BE%8B%E5%9B%BE.png",B="/blog/picture/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/UML%E5%BA%8F%E5%88%97%E5%9B%BE.png",u="/blog/picture/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/UML%E9%80%9A%E4%BF%A1%E5%9B%BE.png",c="/blog/picture/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/UML%E7%8A%B6%E6%80%81%E5%9B%BE.png",h="/blog/picture/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/UML%E6%B4%BB%E5%8A%A8%E5%9B%BE.png",s="/blog/picture/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/UML%E6%9E%84%E4%BB%B6%E5%9B%BE.png",d="/blog/picture/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/UML%E9%83%A8%E7%BD%B2%E5%9B%BE.png",k=JSON.parse('{"title":"3、图","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/软件设计师/第7章 - UML/3.图.md","filePath":"ruankao/软件设计师/第7章 - UML/3.图.md","lastUpdated":1761796671000}'),p={name:"ruankao/软件设计师/第7章 - UML/3.图.md"};function A(b,l,g,m,_,q){return t(),a("div",null,l[0]||(l[0]=[e('<h1 id="_3、图" tabindex="-1">3、图 <a class="header-anchor" href="#_3、图" aria-label="Permalink to &quot;3、图&quot;">​</a></h1><ul><li>是一组元素的图形表示</li><li>类图、用例图、对象图都是对系统的静态方面进行建模</li><li>序列图和通信图、状态图是对系统的动态方面进行建模</li></ul><h2 id="类图" tabindex="-1">类图 <a class="header-anchor" href="#类图" aria-label="Permalink to &quot;类图&quot;">​</a></h2><ul><li><strong>展现了一组对象、接口、协作和它们之间的关系</strong>。是建模中最常见的图</li><li>对系统静态设计视图建模，支持系统的功能需求</li><li>对系统的词汇、简单的协作、逻辑数据库模式建模</li><li>通常包括：类、接口（少）、协作（少）、依赖泛化和关联关系</li><li>抽象类不能直接实例化</li></ul><img src="'+r+'"> 属性和方法前面会有修饰符 <ul><li>+：public</li><li>-：private</li><li>#：projected</li><li>～：package</li></ul><img src="'+o+'"><h2 id="对象图" tabindex="-1">对象图 <a class="header-anchor" href="#对象图" aria-label="Permalink to &quot;对象图&quot;">​</a></h2><ul><li><strong>展现了某一时刻一组对象以及它们之间的关系</strong></li><li>描述了类图中所建立的事物的实例</li><li>包括对象和链</li><li>矩形框中格式是对象名：类名</li></ul><img src="'+E+'"><h2 id="用例图" tabindex="-1">用例图 <a class="header-anchor" href="#用例图" aria-label="Permalink to &quot;用例图&quot;">​</a></h2><ul><li>展现了一组用例（椭圆）、参与者（小人标志）以及它们之间的关系</li><li>用于对系统的静态用例视图（系统的语境、系统的需求）进行建模</li><li>包括用例、参与者、用例之间的扩展关系（<code>&lt;&lt;extend&gt;&gt;</code>）和包含关系(<code>&lt;&lt;include&gt;&gt;</code>)；参与者和用例之间的关联关系(直线连接)；用例与用例以及参与者与参与者之间的泛化关系（继承的反关系，空心三角指向父类）</li></ul><img src="'+n+'"><h3 id="包含关系" tabindex="-1">包含关系 <a class="header-anchor" href="#包含关系" aria-label="Permalink to &quot;包含关系&quot;">​</a></h3><ul><li>是用例和用例之间的关系</li><li>一个用例包含另一个用例</li><li>执行用例一定会执行被包含用例</li><li>是一个虚线箭头，上面写一个关键字<code>&lt;&lt;include&gt;&gt;</code></li><li>箭头右边的是被包含用例，左边是基本用例</li></ul><h3 id="扩展关系" tabindex="-1">扩展关系 <a class="header-anchor" href="#扩展关系" aria-label="Permalink to &quot;扩展关系&quot;">​</a></h3><ul><li>是用例和用例之间的关系</li><li>一个用例执行的时候，可能会发生一些特殊的情况或可选的情况，这种情况就是扩展用例（比如借书，超过还书期限就要罚款，罚款就是扩展用例）</li><li>是一个虚线箭头，上面写一个关键字<code>&lt;&lt;extend&gt;&gt;</code></li><li>箭头右边的是被基本用例，左边是拓展用例</li></ul><h3 id="泛化关系" tabindex="-1">泛化关系 <a class="header-anchor" href="#泛化关系" aria-label="Permalink to &quot;泛化关系&quot;">​</a></h3><ul><li>一般元素和特殊元素之间的关系，是参与者与参与者之间的关系；是用例与用例之间的关系</li><li>是一个实线带一个空心的三角</li><li>箭头右边是父类</li></ul><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><ul><li>关联是参与者和用例之间的关系</li><li>包含</li><li>拓展都是用例和用例之间的关系</li><li>泛化是参与者与参与者、用例与用例之间的关系</li></ul><h2 id="交互图" tabindex="-1">交互图 <a class="header-anchor" href="#交互图" aria-label="Permalink to &quot;交互图&quot;">​</a></h2><ul><li>对系统的动态部分进行建模</li><li>一张交互图表现的是一个交互，由一组对象和它们之间的关系组成个，包含它们之间可能传递的消息</li><li>交互图一般包含对象、链和消息</li></ul><h3 id="序列图-顺序图" tabindex="-1">序列图（顺序图） <a class="header-anchor" href="#序列图-顺序图" aria-label="Permalink to &quot;序列图（顺序图）&quot;">​</a></h3><ul><li>是场景的图形化表示</li><li>描述了以时间顺序组织的对象之间的交互活动，展示一个用例和多个对象的行为</li><li>把参加交互的对象放在图的上方（对象名：类名）</li><li>对象可以在交互中创建</li><li>把发起交互的对象放在左边，下级对象放在右边，把这些对象发送和接受的消息沿垂直方向按时间顺序从上到下放置</li><li>差表示对象销毁</li><li>序列图有生命线（一个对象一条生命线，是一条垂直的虚线），表示一个对象在一段时间内存在</li><li>序列图有控制焦点（一个瘦高的矩形），表示一个对象执行一个动作所经历的时间段</li><li>序列图有四类消息 <ul><li>同步消息：发送以后需要等待消息返回</li><li>异步消息：发送以后不需要等待消息返回</li><li>调用消息（实线箭头）：A 对象向 B 对象发送消息，指向谁谁需要实现特定方法</li><li>返回消息（反方向虚线箭头）：从右往左的消息</li></ul></li></ul><img src="'+B+'"><h3 id="通信图-协作图" tabindex="-1">通信图（协作图） <a class="header-anchor" href="#通信图-协作图" aria-label="Permalink to &quot;通信图（协作图）&quot;">​</a></h3><ul><li>强调收发消息对象的结构组织</li><li>将参与交互的对象作为图的顶点，把连接对象的链表示为图的弧，最后用对象发送和接受的消息来修饰这些链</li><li>通信图有路径（在链的末端加上路径构造型）：local（局部）、parameter（参数）、global（全局）、self（自身）</li><li>通信图有顺序号（会给消息前面加数字前缀，为了显示嵌套可以使用带小数点的号码（1 表示第一个消息，1.1 表示嵌套在消息 1 中的第一个消息））</li><li>和顺序图可以相互转换</li></ul><img src="'+u+'"><h2 id="状态图" tabindex="-1">状态图 <a class="header-anchor" href="#状态图" aria-label="Permalink to &quot;状态图&quot;">​</a></h2><ul><li>展现了一个状态机</li><li>由状态、转换、事件和活动组成</li><li>是一个动态图，一种对象的行为进行建模</li></ul><img src="'+c+'"><h3 id="状态和活动" tabindex="-1">状态和活动 <a class="header-anchor" href="#状态和活动" aria-label="Permalink to &quot;状态和活动&quot;">​</a></h3><ul><li>状态是任何可以被观察到的系统行为模式，分为简单状态和组合状态</li><li>一个状态代表系统的一种行为模式</li><li>有初态（黑实心圆）、终态（黑圆点加一个圆）和中间状态（圆角四边形，可以用两条水平线分成上中下 3 个部分，<strong>上面是状态的名称，下面是活动表</strong>）</li><li>活动表有若干动作组成，格式如下：事件名 / 动作表达式，常用的是 entry（进入该状态的动作，立即执行）、do（指定在该状态下的动作，占有有限事件，并可以中断的工作）、exit（指定退出该状态的动作，立即执行）</li><li>状态之间为状态转换（箭头线表示），箭头上的事件发生时，状态转换开始</li><li>初态只能有一个，终态可以是 0 或多个</li></ul><h3 id="转换和事件" tabindex="-1">转换和事件 <a class="header-anchor" href="#转换和事件" aria-label="Permalink to &quot;转换和事件&quot;">​</a></h3><ul><li>事件是在某个特定时刻发生的事情</li><li>引起系统作动作或从一个状态转换到另一个状态的外界事件的抽象</li><li>状态的变迁是事件触发的，事件要包括两个状态</li><li>如果箭头上没有标明事件，就说明在源状态的内部活动执行完之后自动触发转换</li><li>活动（动作）可以在状态内执行，也可以在状态转换（迁移）时执行</li><li>转换的格式为：触发事件【监护条件（是一个布尔表达式）】 / 动作 监护条件决定状态转换</li></ul><h2 id="活动图" tabindex="-1">活动图 <a class="header-anchor" href="#活动图" aria-label="Permalink to &quot;活动图&quot;">​</a></h2><ul><li>一种特殊的状态图</li><li>展现了从一个活动到另一个活动</li><li>专注于系统的动态视图</li><li>对复杂用例中的业务处理流程进行建模</li><li>并发分岔后可以同时执行</li></ul><img src="'+h+'"><h2 id="构件图-组件图" tabindex="-1">构件图（组件图） <a class="header-anchor" href="#构件图-组件图" aria-label="Permalink to &quot;构件图（组件图）&quot;">​</a></h2><ul><li>展现了一组构件之间的组织和依赖</li><li>专注于系统静态展现视图</li><li>与类图相关，把构件映射为一个或多个类、接口、协作</li></ul><p>构件会有一个标记，类似一个大矩形和两个小矩形</p><ul><li>供接口：依赖于需接口</li><li>需接口</li></ul><img src="'+s+'"><h2 id="部署图" tabindex="-1">部署图 <a class="header-anchor" href="#部署图" aria-label="Permalink to &quot;部署图&quot;">​</a></h2><ul><li>面向对象系统的物理方面的建模方法</li><li>展现了运行时处理结点以及其中构件的配置</li><li>展现了软件和硬件之间的关系，在实施阶段使用</li></ul><img src="'+d+'"><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><p>静态建模：类图、对象图、用例图</p></li><li><p>动态建模：序列图（顺序图、时序图）、通信图、状态图、活动图</p></li><li><p>物理建模：构件图、部署图</p></li><li><p>交互图：序列图、通信图</p></li></ul>',50)]))}const x=i(p,[["render",A]]);export{k as __pageData,x as default};
