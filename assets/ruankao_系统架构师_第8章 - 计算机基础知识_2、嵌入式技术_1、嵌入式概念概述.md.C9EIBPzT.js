import{_ as l,c as i,ag as e,o as r}from"./chunks/framework.BxW8Wou5.js";const t="/blog/picture/%E8%BD%AF%E8%80%83/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90%E6%9E%B6%E6%9E%84.png",b=JSON.parse('{"title":"1、嵌入式概念概述","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/系统架构师/第8章 - 计算机基础知识/2、嵌入式技术/1、嵌入式概念概述.md","filePath":"ruankao/系统架构师/第8章 - 计算机基础知识/2、嵌入式技术/1、嵌入式概念概述.md","lastUpdated":1748002092000}'),o={name:"ruankao/系统架构师/第8章 - 计算机基础知识/2、嵌入式技术/1、嵌入式概念概述.md"};function n(h,a,s,d,u,c){return r(),i("div",null,a[0]||(a[0]=[e('<h1 id="_1、嵌入式概念概述" tabindex="-1">1、嵌入式概念概述 <a class="header-anchor" href="#_1、嵌入式概念概述" aria-label="Permalink to &quot;1、嵌入式概念概述&quot;">​</a></h1><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><ul><li>嵌入式系统是以应用为中心、以计算机技术为基础，并将可配置与可裁剪的软、硬件继承于一体的专用计算机系统，需要满足应用对功能、可靠性、成本、体积和功耗等方面的严格要求</li><li>从计算机角度看，嵌入式系统是指嵌入各种设备及应用产品内部的计算机系统。它主要完成信号控制的功能，体积小、结构紧凑，可作为一个部件埋藏于所控制的装置中</li><li>一般嵌入式系统由嵌入式处理器、相关支撑硬件、嵌入式操作系统、支撑软件以及应用软件组成</li></ul><h2 id="组成架构" tabindex="-1">组成架构 <a class="header-anchor" href="#组成架构" aria-label="Permalink to &quot;组成架构&quot;">​</a></h2><img src="'+t+'"><ul><li>抽象层：HAL 和 BSP（硬件有关性、操作系统有关性） 影响易移植性</li><li>中间层：屏蔽底层硬件细节，常见功能有网络通信、内存管理、和数据处理</li></ul><h2 id="组成部件" tabindex="-1">组成部件 <a class="header-anchor" href="#组成部件" aria-label="Permalink to &quot;组成部件&quot;">​</a></h2><ul><li>嵌入式微处理器</li><li>存储器</li><li>内（外）总线逻辑</li><li>定时/计数器</li><li>看门狗电路：保证系统可靠性的技术，定时器超时会产生看门狗中断</li><li>I/O 接口</li><li>外部设备</li><li>其他部件</li></ul><h2 id="典型架构" tabindex="-1">典型架构 <a class="header-anchor" href="#典型架构" aria-label="Permalink to &quot;典型架构&quot;">​</a></h2><h3 id="层次化模式架构" tabindex="-1">层次化模式架构 <a class="header-anchor" href="#层次化模式架构" aria-label="Permalink to &quot;层次化模式架构&quot;">​</a></h3><p>依赖于概念的抽象，不同使用者可关注到架构的不同层面的细节</p><h4 id="主要设计思想" tabindex="-1">主要设计思想 <a class="header-anchor" href="#主要设计思想" aria-label="Permalink to &quot;主要设计思想&quot;">​</a></h4><ul><li>当一个系统存在高层次的抽象，这些抽象的形式是一个个的抽象概念，而这些抽象概念需要具体的底层概念进行实现时，就可采用层次化模式。</li><li>分层模式结构只包含了一个主要的元素和它的接口，以及用来说明模式结构的约束条件</li></ul><h4 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;分类&quot;">​</a></h4><ul><li>封闭型：一层中的对象只能调用同一层或下一层底层的对象提供的方法**（封装、移植性较好）**</li><li>开放型：一层中的对象可以调用同一层或低于该层的任意一层的对象提供的方法**（性能较好）**</li></ul><h3 id="递归模式架构" tabindex="-1">递归模式架构 <a class="header-anchor" href="#递归模式架构" aria-label="Permalink to &quot;递归模式架构&quot;">​</a></h3><p>实际上是对系统的抽象；系统中的交互协作可以在不同的层次上进行抽象；只不过每层反映的细节不同而已。递归模式的实现实际上就是靠重复应用简单的包含关系。</p><h4 id="创建的工作流程" tabindex="-1">创建的工作流程 <a class="header-anchor" href="#创建的工作流程" aria-label="Permalink to &quot;创建的工作流程&quot;">​</a></h4><ul><li>自顶向下：自顶向下工作流从<strong>系统层级开始并标识结构对象</strong>，这些对象提供实现协作的服务。在实时系统和嵌入式系统中，大多数情况下是基于某个标准方法，将系统分成一个个子系统。当开发人员逐步降低抽象层级，向下推进时，<strong>容易确保开发者的工作没有偏离用例中所规定的需求</strong></li><li>自底向上：自底向上<strong>专注于域的构造</strong>--首先确定域中的关键类和关系。这种方法之所以是可行是因为：开发者以往有丰富的开发经验，并能将其他领域所获得的知识映射到当前开发所在的域中。通过这种方法，<strong>最终开发者会到达子系统的抽象</strong></li></ul><h2 id="发展历程" tabindex="-1">发展历程 <a class="header-anchor" href="#发展历程" aria-label="Permalink to &quot;发展历程&quot;">​</a></h2><ul><li>第一阶段：单片微型计算机（SCM）阶段，即单片机时代</li><li>第二阶段：微控制器（MCU）阶段</li><li>第三阶段：片上系统（SOC）</li><li>第四阶段：以 InterNet 为基础的嵌入式系统</li><li>第五阶段：在智能化、云技术推动下的嵌入式系统</li></ul>',21)]))}const m=l(o,[["render",n]]);export{b as __pageData,m as default};
