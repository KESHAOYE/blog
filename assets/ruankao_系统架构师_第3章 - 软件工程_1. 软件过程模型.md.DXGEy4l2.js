import{_ as l,c as i,ag as r,o as e}from"./chunks/framework.BxW8Wou5.js";const t="/blog/picture/%E8%BD%AF%E8%80%83/%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B.png",o="/blog/picture/%E8%BD%AF%E8%80%83/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%9E%8B.png",h="/blog/picture/%E8%BD%AF%E8%80%83/V%E6%A8%A1%E5%9E%8B.png",n="/blog/picture/%E8%BD%AF%E8%80%83/W%E6%A8%A1%E5%9E%8B.png",s="/blog/picture/%E8%BD%AF%E8%80%83/%E8%9E%BA%E6%97%8B%E6%A8%A1%E5%9E%8B.png",u="/blog/picture/%E8%BD%AF%E8%80%83/%E6%9E%84%E4%BB%B6%E7%BB%84%E8%A3%85%E6%A8%A1%E5%9E%8B.png",d="/blog/picture/%E8%BD%AF%E8%80%83/%E5%BF%AB%E9%80%9F%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B.png",c="/blog/picture/%E8%BD%AF%E8%80%83/%E7%BB%9F%E4%B8%80%E8%BF%87%E7%A8%8B.png",b="/blog/picture/%E8%BD%AF%E8%80%83/%E6%95%8F%E6%8D%B7%E6%96%B9%E6%B3%95Scrum.png",p="/blog/picture/%E8%BD%AF%E8%80%83/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B.png",q="/blog/picture/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E7%9A%84%E8%8E%B7%E5%8F%96.png",B=JSON.parse('{"title":"1. 软件过程模型","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/系统架构师/第3章 - 软件工程/1. 软件过程模型.md","filePath":"ruankao/系统架构师/第3章 - 软件工程/1. 软件过程模型.md","lastUpdated":null}'),g={name:"ruankao/系统架构师/第3章 - 软件工程/1. 软件过程模型.md"};function m(E,a,f,P,k,x){return e(),i("div",null,a[0]||(a[0]=[r('<h1 id="_1-软件过程模型" tabindex="-1">1. 软件过程模型 <a class="header-anchor" href="#_1-软件过程模型" aria-label="Permalink to &quot;1. 软件过程模型&quot;">​</a></h1><p>软件过程模型是制作软件产品的一组活动以及结果，这些活动由软件人员开完成，包括<strong>软件描述、软件开发、软件有效性验证和软件进化</strong></p><h2 id="瀑布模型" tabindex="-1">瀑布模型 <a class="header-anchor" href="#瀑布模型" aria-label="Permalink to &quot;瀑布模型&quot;">​</a></h2><p>模型的形态类似于瀑布的结构</p><img src="'+t+'"><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li>严格区分阶段，每个阶段因果关系紧密相连</li><li>只适合<strong>需求明确</strong>的项目</li></ul><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>软件需求完整性、正确性难确定</li><li>严格串行化，<strong>需要很长时间才能看到结果</strong></li><li>瀑布模型<strong>要求每个阶段一次性完成该阶段所有工作</strong>，这不现实</li></ul><h2 id="原型模型" tabindex="-1">原型模型 <a class="header-anchor" href="#原型模型" aria-label="Permalink to &quot;原型模型&quot;">​</a></h2><img src="'+o+'"><p>虚线部分可能不会涉及</p><p><strong>原型开发</strong>是通过开发一个简易系统来获取需求</p><h3 id="特点-1" tabindex="-1">特点 <a class="header-anchor" href="#特点-1" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li>适合需求不明确的项目</li><li>有两个阶段，是原型开发阶段和目标软件开发阶段</li></ul><h3 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h3><ul><li>【抛弃型分支】：仅用在需求分析阶段，用后就抛弃</li><li>【演化型分支】：目标软件是在原型软件的基础上进行开发</li></ul><h3 id="原型及相关模型" tabindex="-1">原型及相关模型 <a class="header-anchor" href="#原型及相关模型" aria-label="Permalink to &quot;原型及相关模型&quot;">​</a></h3><h4 id="演化模型" tabindex="-1">演化模型 <a class="header-anchor" href="#演化模型" aria-label="Permalink to &quot;演化模型&quot;">​</a></h4><p>属于演化型分支</p><h4 id="快速原型模型" tabindex="-1">快速原型模型 <a class="header-anchor" href="#快速原型模型" aria-label="Permalink to &quot;快速原型模型&quot;">​</a></h4><p>属于抛弃型分支</p><h4 id="增量模型" tabindex="-1">增量模型 <a class="header-anchor" href="#增量模型" aria-label="Permalink to &quot;增量模型&quot;">​</a></h4><p>先做一个核心模块，然后开发一个和核心模块相关的模块，以此类推 不断叠加</p><h2 id="v-模型" tabindex="-1">V 模型 <a class="header-anchor" href="#v-模型" aria-label="Permalink to &quot;V 模型&quot;">​</a></h2><ul><li>测试贯穿始终</li><li>测试分阶段，测试计划工作提前</li></ul><img src="'+h+'"><h3 id="流程" tabindex="-1">流程 <a class="header-anchor" href="#流程" aria-label="Permalink to &quot;流程&quot;">​</a></h3><ul><li>验收测试看最终完成的应用和用户提出的需求是否一致，所以测试计划在需求分析阶段完成</li><li>系统测试强调软硬件环境联合测试，也对应需求分析阶段</li><li>集成测试测试不同模块间能否协同工作，对应概要设计</li><li>单元测试测试单个模块内部的流程，对应详细设计</li></ul><h2 id="w-模型" tabindex="-1">W 模型 <a class="header-anchor" href="#w-模型" aria-label="Permalink to &quot;W 模型&quot;">​</a></h2><p>是 V 模型的调整与改进</p><img src="'+n+'"><p>上图中蓝色是开发过程，红色是测试过程。</p><p>W 模型由两个 V 构成（测试 + 开发），是一个测试和开发并行进行的模型</p><h2 id="迭代和增量" tabindex="-1">迭代和增量 <a class="header-anchor" href="#迭代和增量" aria-label="Permalink to &quot;迭代和增量&quot;">​</a></h2><ul><li>增量：一次次增加，一个需求分步完成，比如画一直米老鼠，第一次画耳朵，第二次画眼睛</li><li>迭代：一次次改善，一个需求逐步完善，比如画米老鼠，先画米老鼠雏形，再进一步完善</li></ul><h2 id="螺旋模型" tabindex="-1">螺旋模型 <a class="header-anchor" href="#螺旋模型" aria-label="Permalink to &quot;螺旋模型&quot;">​</a></h2><p><strong>以快速原型为基础 + 瀑布模型</strong>，考虑了风险问题</p><img src="'+s+'"><h3 id="目标设定" tabindex="-1">目标设定 <a class="header-anchor" href="#目标设定" aria-label="Permalink to &quot;目标设定&quot;">​</a></h3><p>决定目标、方案和限制</p><h3 id="风险分析-重要" tabindex="-1">风险分析（重要） <a class="header-anchor" href="#风险分析-重要" aria-label="Permalink to &quot;风险分析（重要）&quot;">​</a></h3><p>评价方案、识别风险、消除风险</p><h3 id="开发和有效性验证" tabindex="-1">开发和有效性验证 <a class="header-anchor" href="#开发和有效性验证" aria-label="Permalink to &quot;开发和有效性验证&quot;">​</a></h3><p>开发、验证下一产品</p><h3 id="评审" tabindex="-1">评审 <a class="header-anchor" href="#评审" aria-label="Permalink to &quot;评审&quot;">​</a></h3><h2 id="构件组装模型" tabindex="-1">构件组装模型 <a class="header-anchor" href="#构件组装模型" aria-label="Permalink to &quot;构件组装模型&quot;">​</a></h2><ul><li>例子：方舱医院、乐高积木</li></ul><img src="'+u+'"><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><p>易拓展、易重用、降低成本、安排任务更灵活</p><h3 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><p>构件设计要求经验丰富的架构师、设计不好的构件难重用、强调重用可能牺牲其他指标（如性能）、第三方构件质量难控制</p><h2 id="基于构件的软件工程-cbse" tabindex="-1">基于构件的软件工程（CBSE） <a class="header-anchor" href="#基于构件的软件工程-cbse" aria-label="Permalink to &quot;基于构件的软件工程（CBSE）&quot;">​</a></h2><p>CBSE 体现了 **【购买而不是重新构造】**的哲学</p><h3 id="特征" tabindex="-1">特征 <a class="header-anchor" href="#特征" aria-label="Permalink to &quot;特征&quot;">​</a></h3><ul><li>可组装性： 所有 <strong>外部交互</strong> 必须通过 <strong>公开定义的接口</strong> 进行</li><li>可部署性：构件总是二进制形式的，能作为一个 <strong>独立实体在平台上运行</strong></li><li>文档化： 用户根据文档来判断构件是否满足需求</li><li>独立性：可以在无其他特殊构件的情况下进行组装和部署</li><li>标准化： <strong>符合某种标准化的构件模型</strong></li></ul><h3 id="要素" tabindex="-1">要素 <a class="header-anchor" href="#要素" aria-label="Permalink to &quot;要素&quot;">​</a></h3><ul><li>【接口】：构件通过构件接口来定义，构件模型规定应如何定义构件接口以及在接口定义中应该包含的要素，如操作名、参数以及异常等</li><li>【使用信息】：为了使构件远程分布和访问，必须给构件一个特定的、全局唯一的名字或句柄。 <strong>构件元数据是构件本身相关的数据</strong>，比如构件的接口和属性信息。用户可以通过元数据找到构件提供的服务。构件模型的实现通常包括访问构件的元数据的特定方法。 <strong>构件是通用实体，在不熟的时候，必须对构件进行配置来适应应用系统</strong></li><li>【部署】：构件模型包括一个规格说明，指出应该如何打包构件使其部署成为一个独立的可执行实体。<strong>部署信息中包含有关包中内容的相关信息和它的二进制构成信息</strong></li></ul><h3 id="组装-要借助胶水代码" tabindex="-1">组装（要借助胶水代码） <a class="header-anchor" href="#组装-要借助胶水代码" aria-label="Permalink to &quot;组装（要借助胶水代码）&quot;">​</a></h3><ul><li>顺序组装：按顺序调用已经存在的构件，可以用连个已经存在的构件来创造一个新的构件</li><li>层次组装：被调用构件的“提供”接口必须和调用构件的“请求”接口兼容</li><li>叠加组装</li></ul><h4 id="组装中的不兼容" tabindex="-1">组装中的不兼容 <a class="header-anchor" href="#组装中的不兼容" aria-label="Permalink to &quot;组装中的不兼容&quot;">​</a></h4><ul><li>参数不兼容：接口每一侧的<strong>操作有相同的名字</strong>，但<strong>参数的类型或参数个数不相同</strong></li><li>操作不兼容：提供接口和请求接口的<strong>操作名不同</strong></li><li>操作不完备：一个构件的提供接口是另一个构件请求接口的子集，或者相反</li></ul><h2 id="快速应用开发模型-rad" tabindex="-1">快速应用开发模型（RAD） <a class="header-anchor" href="#快速应用开发模型-rad" aria-label="Permalink to &quot;快速应用开发模型（RAD）&quot;">​</a></h2><img src="'+d+'"><p>主流程用瀑布，用构件完成别的，构件是能快速的原因</p><h2 id="统一过程-up" tabindex="-1">统一过程（UP） <a class="header-anchor" href="#统一过程-up" aria-label="Permalink to &quot;统一过程（UP）&quot;">​</a></h2><p><strong>应用广泛，系统有一定的规模</strong></p><img src="'+c+'"><h3 id="特性" tabindex="-1">特性 <a class="header-anchor" href="#特性" aria-label="Permalink to &quot;特性&quot;">​</a></h3><ul><li>用例驱动</li><li>以架构为中心</li><li>迭代和增量（每一轮一个循环 - 初始、细化、构造、移交） <ul><li>初始（我们要做什么？这个项目值不值得做）：确定系统范围、定义最终产品视图和业务模型</li><li>细化（我们怎么做？架构是否可行？）：设计及确定系统架构、制定工作计划及资源要求</li><li>构造（我们开始建造了！包括编码-测试）：开发生育构建和应用程序功能，把这些构件集成为产品，并进行详细测试</li><li>移交（我们交付并确保用户可以使用）：确保软件对最终用户是可用的，进行贝塔测试，制作产品发布版本</li></ul></li></ul><h3 id="_9-个核心工作流" tabindex="-1">9 个核心工作流 <a class="header-anchor" href="#_9-个核心工作流" aria-label="Permalink to &quot;9 个核心工作流&quot;">​</a></h3><h4 id="过程-开发" tabindex="-1">过程（开发） <a class="header-anchor" href="#过程-开发" aria-label="Permalink to &quot;过程（开发）&quot;">​</a></h4><ul><li>业务建模</li><li>需求</li><li>分析与设计</li><li>实现</li><li>测试</li><li>部署</li></ul><h4 id="支持-管理" tabindex="-1">支持（管理） <a class="header-anchor" href="#支持-管理" aria-label="Permalink to &quot;支持（管理）&quot;">​</a></h4><ul><li>配置与变更管理</li><li>项目管理（核心）</li><li>环境</li></ul><h2 id="敏捷方法-适应性而非预设性" tabindex="-1">敏捷方法（适应性而非预设性） <a class="header-anchor" href="#敏捷方法-适应性而非预设性" aria-label="Permalink to &quot;敏捷方法（适应性而非预设性）&quot;">​</a></h2><p>增量与迭代可以降低开支风险和产品进度滞后的风险，加快整个开发工作的进度，同时也方便适应用户需求的变化</p><p>是面向人的开发方法</p><p><strong>晚于其他方法</strong></p><h3 id="演进流程" tabindex="-1">演进流程 <a class="header-anchor" href="#演进流程" aria-label="Permalink to &quot;演进流程&quot;">​</a></h3><p>无软件开发方法 -&gt; 传统软件开发方法（如结构法方法瀑布模型） -&gt; 敏捷方法（参考原型开发）</p><h3 id="敏捷方法-极限编程-xp" tabindex="-1">敏捷方法-极限编程 XP <a class="header-anchor" href="#敏捷方法-极限编程-xp" aria-label="Permalink to &quot;敏捷方法-极限编程 XP&quot;">​</a></h3><h4 id="_4-大价值观" tabindex="-1">4 大价值观 <a class="header-anchor" href="#_4-大价值观" aria-label="Permalink to &quot;4 大价值观&quot;">​</a></h4><ul><li>沟通【加强面对面的沟通】</li><li>简单【不过度设计】</li><li>反馈【及时反馈】</li><li>勇气【接受变更的勇气】</li></ul><h4 id="_12-条过程实践规则" tabindex="-1">12 条过程实践规则 <a class="header-anchor" href="#_12-条过程实践规则" aria-label="Permalink to &quot;12 条过程实践规则&quot;">​</a></h4><ul><li>简单设计</li><li>测试驱动</li><li>代码重构</li><li>结对编程：两人组成一对，一人写代码一人在电脑旁审核</li><li>持续集成：不断去集成</li><li>现场客户</li><li>发型版本小型化</li><li>系统隐喻：举例、打比方的方式让大家认可</li><li>代码集体所有制</li><li>规划策略</li><li>规范代码</li><li>40 小时工作机制</li></ul><h3 id="敏捷方法-scrum" tabindex="-1">敏捷方法-Scrum <a class="header-anchor" href="#敏捷方法-scrum" aria-label="Permalink to &quot;敏捷方法-Scrum&quot;">​</a></h3><img src="'+b+'"><p>不强调一次性完成整个系统，而是每次从产品代办列表中抽取需求迭代</p><p>一个迭代 1-4 周</p><p><strong>不适用大团队</strong></p><h3 id="敏捷方法-水晶方法" tabindex="-1">敏捷方法 - 水晶方法 <a class="header-anchor" href="#敏捷方法-水晶方法" aria-label="Permalink to &quot;敏捷方法 - 水晶方法&quot;">​</a></h3><p>提倡机动性的方法，拥有对不同类型项目非常有效的敏捷过程</p><h3 id="敏捷方法-特征驱动开发方法-fdd" tabindex="-1">敏捷方法 - 特征驱动开发方法（FDD） <a class="header-anchor" href="#敏捷方法-特征驱动开发方法-fdd" aria-label="Permalink to &quot;敏捷方法 - 特征驱动开发方法（FDD）&quot;">​</a></h3><p>认为有效的软件开发需要 3 要素【人、过程、技术】 定义了 6 种关键的项目角色：项目经理、首席软件架构师、开发经理、主程序猿、程序员和领域专家</p><h2 id="逆向工程" tabindex="-1">逆向工程 <a class="header-anchor" href="#逆向工程" aria-label="Permalink to &quot;逆向工程&quot;">​</a></h2><p>按正向工程反其道行之</p><img src="'+p+'"><ul><li>实现级：关注软硬件的具体实现方式，理解为“看清每一颗螺丝、每一条电线”</li><li>领域级：关注系统所处的应用领域和目标（需求、设计目标），理解为“理解这个工具用来钉钉子还是拧螺丝，以及为什么是这样的”</li><li>结构级：关注系统整体组织和组件间的关系，理解为“工具由哪些部件构成，这些部件怎么连接在一起工作的”</li><li>功能级：关注系统的外部行为和所提供的功能，不关注实现，理解为“理解这个工具可以用来做什么，比如它可以钉钉子、拧螺丝、或者测量长度”</li></ul><h3 id="相关概念" tabindex="-1">相关概念 <a class="header-anchor" href="#相关概念" aria-label="Permalink to &quot;相关概念&quot;">​</a></h3><ul><li>重构/重组：重构/重组：在【同一抽象级别】上【转换系统描述模式】</li><li>设计恢复【强调抽取设计】：设计恢复是指借助工具从已有程序中抽象出有关数据设计、总体结构设计和过程设计等方面消息</li><li>逆向工程【强调流程性】：逆向工程是分析程序，力图在比源代码更尬拍抽象层次上建立程序的表示过程，逆向程序是设计的恢复过程</li><li>正向工程：正向工程是指不仅从现有系统中恢复设计信息，而且使用该信息去改变或重构现有系统，以改善其整体质量</li><li>再工程/重构工程：再工程是对现有系统的重新开发过程，包括逆向工程、新需求的考虑过程和正向工程三个步骤。</li></ul><h2 id="净室软件工程【把软件工程放到一个尽量干净的地方】" tabindex="-1">净室软件工程【把软件工程放到一个尽量干净的地方】 <a class="header-anchor" href="#净室软件工程【把软件工程放到一个尽量干净的地方】" aria-label="Permalink to &quot;净室软件工程【把软件工程放到一个尽量干净的地方】&quot;">​</a></h2><ul><li>强调以<strong>合理的成本</strong>开发出<strong>高质量</strong>的软件</li><li>理论基础主要是<strong>函数理论</strong>和<strong>抽样理论</strong></li><li>它提倡开发者<strong>不需要进行单元测试（还是需要传统的模块测试）</strong>，而是进行<strong>正确性验证</strong>和统计质量控制</li><li>因为高质量改进管理，降低风险及成本，满足用户需求，提供竞争优势。</li></ul><h3 id="【技术手段】" tabindex="-1">【技术手段】 <a class="header-anchor" href="#【技术手段】" aria-label="Permalink to &quot;【技术手段】&quot;">​</a></h3><ul><li>统计过程控制下的增量式开发：控制迭代</li><li>基于函数的规范和设计：盒子结构 定义 3 种抽象层次：行为视图（黑盒） -&gt; 有限状态机视图（状态盒） -&gt; 过程视图（明盒）</li><li>正确性验证：<strong>净室工程的核心</strong>，使软件的质量有了极大程度的提高</li><li>统计测试盒软件认证：使用统计学原理，总体太大时必须使用抽样方法</li></ul><h3 id="【缺点】" tabindex="-1">【缺点】 <a class="header-anchor" href="#【缺点】" aria-label="Permalink to &quot;【缺点】&quot;">​</a></h3><ul><li>太理论化，正确性验证的步骤比较困难且耗时</li><li>开发小组不进行传统的模块测试，这是不现实的</li><li>脱胎于传统软件工程，不可避免带有传统软件工程的一些弊端</li></ul><h2 id="需求工程" tabindex="-1">需求工程 <a class="header-anchor" href="#需求工程" aria-label="Permalink to &quot;需求工程&quot;">​</a></h2><ul><li>软件需求是指<strong>用户对系统</strong>在功能、行为、性能、设计约束等方面的<strong>期望</strong></li></ul><h3 id="主要活动的阶段划分" tabindex="-1">主要活动的阶段划分 <a class="header-anchor" href="#主要活动的阶段划分" aria-label="Permalink to &quot;主要活动的阶段划分&quot;">​</a></h3><p>（以下是需求开发）</p><h4 id="需求获取" tabindex="-1">需求获取 <a class="header-anchor" href="#需求获取" aria-label="Permalink to &quot;需求获取&quot;">​</a></h4><img src="'+q+'"><h5 id="需求获取的方法" tabindex="-1">需求获取的方法 <a class="header-anchor" href="#需求获取的方法" aria-label="Permalink to &quot;需求获取的方法&quot;">​</a></h5><ul><li>用户面谈：1 对 1-3，有代表性的用户，了解主观想法，交互好。<strong>成本高，要有领域知识支撑</strong></li><li>需求专题讨论会（JRP）：<strong>高度组织的群体会议，各方参与，了解想法，消除分歧，交互好，成本高</strong></li><li>问卷调查：用户多，无法一一访谈，成本低。</li><li>现场观察：针对较为复杂的流程和操作</li><li>原型化方法：构造简易需求版本<strong>解决早期需求不确定的问题</strong></li><li>头脑风暴法：一群人围绕信业务，发散思维，不产生新的观点</li></ul><h5 id="分层" tabindex="-1">分层 <a class="header-anchor" href="#分层" aria-label="Permalink to &quot;分层&quot;">​</a></h5><ul><li>业务需求（整体全局）：偏向企业整体全局，主要是老板的预期</li><li>用户需求（用户视角）：</li><li>功能（系统）需求（计算机化） - 包括功能需求、性能需求（非功能）、设计约束（是否使用国产数据库等）</li></ul><h5 id="项目管理维度" tabindex="-1">项目管理维度 <a class="header-anchor" href="#项目管理维度" aria-label="Permalink to &quot;项目管理维度&quot;">​</a></h5><ul><li>基本需求（明示，常规需求）</li><li>期望需求（隐含）</li><li>兴奋需求（多余）</li></ul><h4 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h4><h5 id="结构化开发需求分析" tabindex="-1">结构化开发需求分析 <a class="header-anchor" href="#结构化开发需求分析" aria-label="Permalink to &quot;结构化开发需求分析&quot;">​</a></h5><p>建立</p><ul><li>功能模型（数据流、加工、数据存储、外部实体 - 使用数据流图，对功能进行建模）、</li><li>行为模型（状态（初态、终态）、事件 - 使用状态转换图）、</li><li>数据模型（使用 ER（实体联系）图，）</li></ul><p><strong>三者融合为数据字典</strong></p><h5 id="面向对象开发需求分析" tabindex="-1">面向对象开发需求分析 <a class="header-anchor" href="#面向对象开发需求分析" aria-label="Permalink to &quot;面向对象开发需求分析&quot;">​</a></h5><ul><li>形成需求规格【形成 SRS】（SRS 是软件需求规格说明书）</li><li>需求确认与验证【形成 <strong>需求基线</strong>（经过评审的 SRS）】</li><li>需求管理【变更控制、版本控制、需求跟踪、需求状态跟踪】（对需求基线进行管理）</li></ul>',127)]))}const A=l(g,[["render",m]]);export{B as __pageData,A as default};
