import{_ as l,c as e,ag as i,o as t}from"./chunks/framework.BxW8Wou5.js";const m=JSON.parse('{"title":"1、数据模型","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/软件设计师/第5章 - 数据库/1.数据模型.md","filePath":"ruankao/软件设计师/第5章 - 数据库/1.数据模型.md","lastUpdated":1761796671000}'),r={name:"ruankao/软件设计师/第5章 - 数据库/1.数据模型.md"};function o(n,a,h,s,d,u){return t(),e("div",null,a[0]||(a[0]=[i('<h1 id="_1、数据模型" tabindex="-1">1、数据模型 <a class="header-anchor" href="#_1、数据模型" aria-label="Permalink to &quot;1、数据模型&quot;">​</a></h1><h2 id="模型" tabindex="-1">模型 <a class="header-anchor" href="#模型" aria-label="Permalink to &quot;模型&quot;">​</a></h2><ul><li>模型是对现实世界的模拟和抽象</li></ul><h2 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;分类&quot;">​</a></h2><h3 id="概念数据模型-从信息世界抽象的" tabindex="-1">概念数据模型（从信息世界抽象的） <a class="header-anchor" href="#概念数据模型-从信息世界抽象的" aria-label="Permalink to &quot;概念数据模型（从信息世界抽象的）&quot;">​</a></h3><h4 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h4><ul><li>概念数据模型是独立于计算机系统的模型，完全不涉及信息在系统中的表示</li><li>只用来描述某个特定组织所关心的信息结构，即按照用户的观点来对数据和信息建模</li><li>一般采用 ER（实体-联系方法）</li></ul><h4 id="常用术语" tabindex="-1">常用术语 <a class="header-anchor" href="#常用术语" aria-label="Permalink to &quot;常用术语&quot;">​</a></h4><ul><li>实体：客观存在并可以识别的物体或对象，如一个单位、一个员工</li><li>属性：描述实体的特性，一个实体可以有若干个属性</li><li>码：唯一标识实体的属性，例如学号是学生实体的码</li><li>域：属性的取值范围，如性别域（男、女）</li><li>实体型：具有相同属性的实体必然有共同的特征和性质，用实体名及其属性名集合来抽象和刻画同类实体，称为实体型，如，学生（学号、姓名、性别、年龄、班级）</li><li>实体集：同型实体的集合称为实体集，全体学生就是一个实体集</li><li>联系：实体之间的对应关系称为联系，联系分为两种，一种是实体内部各属性之间的联系，另一种是实体之间联系</li></ul><h4 id="联系" tabindex="-1">联系 <a class="header-anchor" href="#联系" aria-label="Permalink to &quot;联系&quot;">​</a></h4><p>两个实体之间的联系有三种类型</p><ul><li>一对一联系（1:1）</li><li>一对多联系（1:n）</li><li>多对多联系（m:n）</li></ul><h4 id="er-图" tabindex="-1">ER 图 <a class="header-anchor" href="#er-图" aria-label="Permalink to &quot;ER 图&quot;">​</a></h4><ul><li>实体：用矩形表示</li><li>属性：用椭圆表示</li><li>联系：用菱形表示</li><li>要在无向边旁标注联系（一对一...）</li></ul><h3 id="结构数据模型-从计算机世界中抽象的-dbms-data-base-management-system" tabindex="-1">结构数据模型（从计算机世界中抽象的 DBMS-Data Base Management System） <a class="header-anchor" href="#结构数据模型-从计算机世界中抽象的-dbms-data-base-management-system" aria-label="Permalink to &quot;结构数据模型（从计算机世界中抽象的 DBMS-Data Base Management System）&quot;">​</a></h3><h4 id="概念-1" tabindex="-1">概念 <a class="header-anchor" href="#概念-1" aria-label="Permalink to &quot;概念&quot;">​</a></h4><p>面向数据库的逻辑结构，任何一个 DBMS 都是以某个结构数据模型为基础</p><h4 id="常用术语-1" tabindex="-1">常用术语 <a class="header-anchor" href="#常用术语-1" aria-label="Permalink to &quot;常用术语&quot;">​</a></h4><ul><li>数据项（字段）：是数据库中可以命名的最小逻辑数据单位，可以是一个数或一个字符串，<strong>用它描述属性的数据</strong></li><li>记录：是数据项的有序集，一个记录是由若干个数据项或字段组成，<strong>用它描述实体</strong></li><li>文件：是记录的集合，文件包含记录的结构和记录的值，一个文件由若干个记录组成，<strong>用它描述数据库</strong></li></ul><h4 id="层次模型" tabindex="-1">层次模型 <a class="header-anchor" href="#层次模型" aria-label="Permalink to &quot;层次模型&quot;">​</a></h4><p>用<strong>树结构</strong>来表示数据之间的联系</p><h5 id="特征" tabindex="-1">特征 <a class="header-anchor" href="#特征" aria-label="Permalink to &quot;特征&quot;">​</a></h5><ul><li>有且仅有一个结点没有父节点，它是根节点</li><li>其他结点有且仅有一个父节点</li></ul><h5 id="树结构" tabindex="-1">树结构 <a class="header-anchor" href="#树结构" aria-label="Permalink to &quot;树结构&quot;">​</a></h5><ul><li>每个结点描述一个实体型，称为记录型</li><li>一个记录型有多个记录值记录</li></ul><h4 id="网状模型" tabindex="-1">网状模型 <a class="header-anchor" href="#网状模型" aria-label="Permalink to &quot;网状模型&quot;">​</a></h4><p>用<strong>图结构</strong>来表示数据之间的联系</p><h4 id="关系模型" tabindex="-1">关系模型 <a class="header-anchor" href="#关系模型" aria-label="Permalink to &quot;关系模型&quot;">​</a></h4><p>用<strong>二维表格结构</strong>来表示数据之间的联系</p><h5 id="特征-1" tabindex="-1">特征 <a class="header-anchor" href="#特征-1" aria-label="Permalink to &quot;特征&quot;">​</a></h5><ul><li>描述的一致性，不仅用关系描述实体本身，而且也用关系描述实体之间的联系</li><li>可直接表示多对多的联系</li><li>关系必须是规范化的关系，即属性不可再分，不允许表中有表</li><li>关系模型是机遇数学概念基础上的，有较强的理论根据</li></ul>',31)]))}const b=l(r,[["render",o]]);export{m as __pageData,b as default};
