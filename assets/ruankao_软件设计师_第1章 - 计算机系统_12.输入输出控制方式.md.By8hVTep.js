import{_ as l,c as i,ag as e,o as t}from"./chunks/framework.BxW8Wou5.js";const c=JSON.parse('{"title":"12、输入输出控制方式","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/软件设计师/第1章 - 计算机系统/12.输入输出控制方式.md","filePath":"ruankao/软件设计师/第1章 - 计算机系统/12.输入输出控制方式.md","lastUpdated":null}'),r={name:"ruankao/软件设计师/第1章 - 计算机系统/12.输入输出控制方式.md"};function o(n,a,_,s,d,u){return t(),i("div",null,a[0]||(a[0]=[e('<h1 id="_12、输入输出控制方式" tabindex="-1">12、输入输出控制方式 <a class="header-anchor" href="#_12、输入输出控制方式" aria-label="Permalink to &quot;12、输入输出控制方式&quot;">​</a></h1><h2 id="程序查询方式" tabindex="-1">程序查询方式 <a class="header-anchor" href="#程序查询方式" aria-label="Permalink to &quot;程序查询方式&quot;">​</a></h2><ul><li>CPU 和 I/O（外设）只能串行工作</li><li>CPU 需要一直轮询检查</li><li>一次只能读/写一个字</li><li>由 CPU 将数据放入内存</li></ul><h2 id="中断驱动方式" tabindex="-1">中断驱动方式 <a class="header-anchor" href="#中断驱动方式" aria-label="Permalink to &quot;中断驱动方式&quot;">​</a></h2><ul><li>I/O 设备通过中断信号主动报告 I/O 操作已完成</li><li><strong>CPU 和 I/O 可并行工作</strong></li><li>CPU 利用率得到提升</li><li>一次只能读/写一个字</li><li>由 CPU 将数据放入内存</li></ul><h2 id="直接存储器方式-dma" tabindex="-1">直接存储器方式 DMA <a class="header-anchor" href="#直接存储器方式-dma" aria-label="Permalink to &quot;直接存储器方式 DMA&quot;">​</a></h2><ul><li>CPU 和 I/O 可以并行工作</li><li>仅在传送数据块开始和结束时才需要 CPU 干预</li><li>由外设直接将数据放入内存</li><li>一次读写的单位为“块”而不是字</li><li>CPU 在一个总线周期结束时响应 DMA 请求</li><li>每传送一个数据都需要占用一个存储周期</li></ul>',7)]))}const P=l(r,[["render",o]]);export{c as __pageData,P as default};
