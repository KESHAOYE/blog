import{_ as e,c as l,ag as i,o as r}from"./chunks/framework.BxW8Wou5.js";const c=JSON.parse('{"title":"3、原反补移码","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/软件设计师/第1章 - 计算机系统/3.原反补移码.md","filePath":"ruankao/软件设计师/第1章 - 计算机系统/3.原反补移码.md","lastUpdated":1760412047000}'),t={name:"ruankao/软件设计师/第1章 - 计算机系统/3.原反补移码.md"};function o(n,a,s,u,h,p){return r(),l("div",null,a[0]||(a[0]=[i('<h1 id="_3、原反补移码" tabindex="-1">3、原反补移码 <a class="header-anchor" href="#_3、原反补移码" aria-label="Permalink to &quot;3、原反补移码&quot;">​</a></h1><p>采用补码简化计算机运算部件的设计</p><h2 id="原码" tabindex="-1">原码 <a class="header-anchor" href="#原码" aria-label="Permalink to &quot;原码&quot;">​</a></h2><ul><li>最高位为符号位，0 为正，1 为负</li></ul><h3 id="取值范围" tabindex="-1">取值范围 <a class="header-anchor" href="#取值范围" aria-label="Permalink to &quot;取值范围&quot;">​</a></h3><p>-（2<sup>n-1</sup> -1） ～ （2<sup>n-1</sup> -1）</p><h2 id="反码" tabindex="-1">反码 <a class="header-anchor" href="#反码" aria-label="Permalink to &quot;反码&quot;">​</a></h2><ul><li>正数和原码相同</li><li>最高位为符号位，0 为正，1 为负</li><li>负数就是除符号位，其余各位取反。</li></ul><h3 id="取值范围-1" tabindex="-1">取值范围 <a class="header-anchor" href="#取值范围-1" aria-label="Permalink to &quot;取值范围&quot;">​</a></h3><p>-（2<sup>n-1</sup> -1） ～ （2<sup>n-1</sup> -1）</p><h2 id="补码" tabindex="-1">补码 <a class="header-anchor" href="#补码" aria-label="Permalink to &quot;补码&quot;">​</a></h2><ul><li>正数和原码相同</li><li>最高位为符号位，0 为正，1 为负</li><li>负数为反码加一</li><li>正负 0 补码一样，都是 00000000</li><li>求补码的补码可以得到原码</li></ul><h3 id="取值范围-2" tabindex="-1">取值范围 <a class="header-anchor" href="#取值范围-2" aria-label="Permalink to &quot;取值范围&quot;">​</a></h3><p>-（2<sup>n-1</sup> ） ～ （2<sup>n-1</sup> -1）</p><p><strong>因为正负 0 的补码一样，所以相当于没有-0，所以就有-128</strong></p><h2 id="移码" tabindex="-1">移码 <a class="header-anchor" href="#移码" aria-label="Permalink to &quot;移码&quot;">​</a></h2><ul><li>在补码的情况下，符号位取反</li><li>正负 0 移码一样，都是 10000000</li><li></li></ul><h3 id="取值范围-3" tabindex="-1">取值范围 <a class="header-anchor" href="#取值范围-3" aria-label="Permalink to &quot;取值范围&quot;">​</a></h3><p>-（2<sup>n-1</sup> ） ～ （2<sup>n-1</sup> -1）</p><p><strong>因为正负 0 的补码一样，所以相当于没有-0，所以就有-128</strong></p>',20)]))}const _=e(t,[["render",o]]);export{c as __pageData,_ as default};
