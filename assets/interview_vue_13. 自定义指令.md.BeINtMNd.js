import{_ as i,c as a,ag as e,o as n}from"./chunks/framework.BxW8Wou5.js";const c=JSON.parse('{"title":"13. vue中的指令","description":"","frontmatter":{},"headers":[],"relativePath":"interview/vue/13. 自定义指令.md","filePath":"interview/vue/13. 自定义指令.md","lastUpdated":1705937785000}'),l={name:"interview/vue/13. 自定义指令.md"};function t(h,s,p,d,k,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_13-vue中的指令" tabindex="-1">13. vue中的指令 <a class="header-anchor" href="#_13-vue中的指令" aria-label="Permalink to &quot;13. vue中的指令&quot;">​</a></h1><h2 id="指令" tabindex="-1">指令 <a class="header-anchor" href="#指令" aria-label="Permalink to &quot;指令&quot;">​</a></h2><p>在vue中提供了默认内置指令（v-on、v-model、v-for等），也允许自定义指令</p><p>指令的几种方式</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 会实例化指令，但没有参数</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;v-xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 将值value传到指令中</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;v-xxx = &quot;value&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // -- 将字符串传入到指令中，如\`v-html=&quot;&#39;&lt;p&gt;内容&lt;/p&gt;&#39;&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \`v-xxx=&quot;&#39;string&#39;&quot;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // -- 传参数（\`arg\`），如\`v-bind:class=&quot;className&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \`v-xxx:arg=&quot;value&quot;\`</span></span></code></pre></div><p><strong>vue2和vue3的指令有所不同</strong></p><h3 id="vue2中的指令" tabindex="-1">vue2中的指令 <a class="header-anchor" href="#vue2中的指令" aria-label="Permalink to &quot;vue2中的指令&quot;">​</a></h3><p>注册一个自定义指令有全局注册与局部注册</p><h4 id="全局注册" tabindex="-1">全局注册 <a class="header-anchor" href="#全局注册" aria-label="Permalink to &quot;全局注册&quot;">​</a></h4><p>使用<code>Vue.directive</code>注册，第一个参数是指令名称（不加上v-前缀），第二个参数可以是对象数据，也可以是一个指令函数</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;focus&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    inserted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 聚焦元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div><h4 id="局部注册" tabindex="-1">局部注册 <a class="header-anchor" href="#局部注册" aria-label="Permalink to &quot;局部注册&quot;">​</a></h4><p>在组件选项的<code>directive</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> directives</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    inserted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><h4 id="钩子函数" tabindex="-1">钩子函数 <a class="header-anchor" href="#钩子函数" aria-label="Permalink to &quot;钩子函数&quot;">​</a></h4><ul><li>bind: 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</li><li>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)</li><li>update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新</li><li>componentUpdated： 指令所在组件的 VNode 及其子 VNode 全部更新后调用</li><li>unbind：只调用一次，指令与元素解绑时调用</li></ul><h5 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h5><ul><li>el: 指令绑定的元素，可以操作DOM</li><li>binding： 一个对象，包含下列属性 <ul><li>name： 指令名称</li><li>value： 指令绑定值,<code>v-focus=&#39;123&#39;</code>，绑定值为123</li><li>oldValue：指令绑定的前一个值，在<code>update</code>和<code>componentUpdated</code>里可用</li><li>expression：字符串形式的表达式,<code>v-focus=&quot;1+5+6&quot;</code>,绑定值为<code>1+5+6</code></li><li>arg: 传给指令的参数，<code>v-focus:test</code>，参数为<code>test</code></li><li>modifiers: 一个包含修饰符（<a href="./12.vue中的修饰符.html">上一篇介绍过</a>）的对象</li></ul></li><li>vnode: vue编译生成的虚拟节点</li><li>oldVnode：上一个虚拟节点，在<code>update</code>和<code>componentUpdated</code>里可用</li></ul><p><strong>除了el，别的都是只读的，不要进行修改</strong></p><h2 id="vue3中的指令" tabindex="-1">vue3中的指令 <a class="header-anchor" href="#vue3中的指令" aria-label="Permalink to &quot;vue3中的指令&quot;">​</a></h2><h3 id="全局注册-composition-api" tabindex="-1">全局注册(Composition Api) <a class="header-anchor" href="#全局注册-composition-api" aria-label="Permalink to &quot;全局注册(Composition Api)&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;focus&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div><h3 id="钩子函数-1" tabindex="-1">钩子函数 <a class="header-anchor" href="#钩子函数-1" aria-label="Permalink to &quot;钩子函数&quot;">​</a></h3><ul><li>created(vue3新增)：在元素的attribute或事件监听器被应用之前调用</li><li>beforeMount（<strong>同vue2的bind</strong>）: 只调用一次，指令第一次绑定到元素时调用，可以定义一个在绑定时执行一次的初始化动作</li><li>mounted（<strong>同vue2的inserted</strong>）：被绑定元素插入父节点时调用</li><li>beforeUpdate（vue3中新增）：绑定元素的父组件更新前调用</li><li>updated（vue3新增）：绑定元素的父组件及他自己的所有子节点都更新后调用</li><li>beforeUnmount（<strong>同vue2的componentUpdate</strong>）：绑定元素的父组件卸载前调用</li><li>unmounted（<strong>vue2中的unbind</strong>）：绑定元素的父组件卸载后调用</li></ul><h3 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h3><p><strong>同vue2</strong></p>`,26)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
