import{_ as s,c as a,ag as e,o as t}from"./chunks/framework.BxW8Wou5.js";const k=JSON.parse('{"title":"4. v-show、v-if的区别","description":"","frontmatter":{},"headers":[],"relativePath":"interview/vue/4. v-show、v-if的区别.md","filePath":"interview/vue/4. v-show、v-if的区别.md","lastUpdated":1705937785000}'),l={name:"interview/vue/4. v-show、v-if的区别.md"};function h(n,i,o,p,r,d){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="_4-v-show、v-if的区别" tabindex="-1">4. v-show、v-if的区别 <a class="header-anchor" href="#_4-v-show、v-if的区别" aria-label="Permalink to &quot;4. v-show、v-if的区别&quot;">​</a></h1><h2 id="相同点" tabindex="-1">相同点 <a class="header-anchor" href="#相同点" aria-label="Permalink to &quot;相同点&quot;">​</a></h2><p>在vue中v-show与v-if的作用效果是相同的，都能控制元素在页面上是否显示</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Component</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;isShow&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Component</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-show</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;isShow&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // isShow为true时都会占用页面位置</span></span></code></pre></div><h2 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h2><ul><li><p>控制手段</p><ul><li>v-show隐藏是为元素添加css属性<code>display:none</code>，dom元素还在</li><li>v-if显示隐藏是将dom元素添加或删除</li></ul></li><li><p>编译过程</p><ul><li>v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件</li><li>v-show只是简单的css切换</li></ul></li><li><p>编译条件</p><ul><li>v-show 由false变为true的时候不会触发组件的生命周期</li><li>v-if由false变为true的时候，触发组件的beforeCreate、create、beforeMount、mounted钩子，由true变为false的时候触发组件的beforeDestory、destoryed方法</li></ul></li><li><p>性能消耗</p><ul><li>v-if有更高的切换消耗</li><li>v-show有更高的初始渲染消耗</li></ul></li></ul><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><p>v-if 与 v-show 都能控制dom元素在页面的显示</p><p>v-if 相比 v-show 开销更大的（直接操作dom节点增加与删除）</p><p><strong>如果需要非常频繁地切换，则使用 v-show 较好</strong></p><p><strong>如果在运行时条件很少改变，则使用 v-if 较好</strong></p>`,11)]))}const u=s(l,[["render",h]]);export{k as __pageData,u as default};
