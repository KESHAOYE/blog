import{_ as e,c as l,ag as a,o as i}from"./chunks/framework.BxW8Wou5.js";const b=JSON.parse('{"title":"2.JS中的类型及类型转换、typeof、==和===、Object.is","description":"","frontmatter":{},"headers":[],"relativePath":"interview/javascript/2.js中的类型及类型转换、typeof.md","filePath":"interview/javascript/2.js中的类型及类型转换、typeof.md","lastUpdated":1705937785000}'),d={name:"interview/javascript/2.js中的类型及类型转换、typeof.md"};function r(o,t,n,u,h,c){return i(),l("div",null,t[0]||(t[0]=[a('<h1 id="_2-js中的类型及类型转换、typeof、-和-、object-is" tabindex="-1">2.JS中的类型及类型转换、typeof、==和===、Object.is <a class="header-anchor" href="#_2-js中的类型及类型转换、typeof、-和-、object-is" aria-label="Permalink to &quot;2.JS中的类型及类型转换、typeof、==和===、Object.is&quot;">​</a></h1><h2 id="类型种类" tabindex="-1">类型种类 <a class="header-anchor" href="#类型种类" aria-label="Permalink to &quot;类型种类&quot;">​</a></h2><p>JS共有7种原始类型，分别是:</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Undefined</li><li>Null</li><li>Symbol</li><li>Bigint</li></ul><p>JS有一种引用类型</p><ul><li>Object</li></ul><h2 id="typeof" tabindex="-1">typeof <a class="header-anchor" href="#typeof" aria-label="Permalink to &quot;typeof&quot;">​</a></h2><p>typeof会返回以下类型(null显示为Object，bigint显示为Number):</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Undefined</li><li>Symbol</li><li>Object</li></ul><h2 id="和" tabindex="-1"><code>==</code>和<code>===</code> <a class="header-anchor" href="#和" aria-label="Permalink to &quot;```==```和```===```&quot;">​</a></h2><p>JS中 == 是相同的意思， === 代码严格相同</p><h3 id="" tabindex="-1"><code>==</code> <a class="header-anchor" href="#" aria-label="Permalink to &quot;``==``&quot;">​</a></h3><h4 id="比较过程" tabindex="-1">比较过程 <a class="header-anchor" href="#比较过程" aria-label="Permalink to &quot;比较过程&quot;">​</a></h4><ul><li>如果两个值类型相同，就进行三个等号的比较</li><li>如果两个值类型不同 <ul><li>如果一个为null、一个为undefined，相等</li><li>如果一个是字符串，一个是数值，则把字符串转换为数值后再比较。</li></ul></li></ul><h3 id="-1" tabindex="-1"><code>===</code> <a class="header-anchor" href="#-1" aria-label="Permalink to &quot;``===``&quot;">​</a></h3><h4 id="比较过程-1" tabindex="-1">比较过程 <a class="header-anchor" href="#比较过程-1" aria-label="Permalink to &quot;比较过程&quot;">​</a></h4><ul><li>如果类型不同，一定不相同</li><li>如果两个都是数值，并且值相等，则相等 <ul><li>如果一个是<code>NaN</code>，一定不相等</li></ul></li><li>如果两个都是字符串，每个位置字符都一样，那么相等，否则不等</li><li>如果两个值都是true，或是false就相等</li><li>如果两个值都是引用同一个对象或是函数，那么相等，否则不相等</li><li>如果两个值都是null，或是undefined，那么相等</li></ul><h3 id="object-is" tabindex="-1">Object.is <a class="header-anchor" href="#object-is" aria-label="Permalink to &quot;Object.is&quot;">​</a></h3><p>和 <code>==</code>、<code>===</code>相比，NaN相等，<code>+0</code>和<code>-0</code>相等，<code>&#39;1&#39;</code>和<code>1</code>不相等</p><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h2><h3 id="显式转换" tabindex="-1">显式转换 <a class="header-anchor" href="#显式转换" aria-label="Permalink to &quot;显式转换&quot;">​</a></h3><h4 id="转为boolean" tabindex="-1">转为Boolean <a class="header-anchor" href="#转为boolean" aria-label="Permalink to &quot;转为Boolean&quot;">​</a></h4><ul><li>使用Boolean()方法</li></ul><table tabindex="0"><thead><tr><th>类型</th><th>值</th><th>转换结果</th></tr></thead><tbody><tr><td>string</td><td>空字符串（&#39;&#39;）</td><td>false</td></tr><tr><td>string</td><td>非空字符串（&#39;abc&#39;）</td><td>true</td></tr><tr><td>Number</td><td>除了0和NaN(10)</td><td>true</td></tr><tr><td>Number</td><td>0、NaN</td><td>false</td></tr><tr><td>undefined、Null</td><td>undefined、null</td><td>false</td></tr><tr><td>Object</td><td>非空对象</td><td>true</td></tr><tr><td>Object</td><td>Object.create(null)</td><td>false</td></tr></tbody></table><h4 id="转为string" tabindex="-1">转为String <a class="header-anchor" href="#转为string" aria-label="Permalink to &quot;转为String&quot;">​</a></h4><ul><li><p>使用String()</p><p>可以转换所有值（非null和undefined会直接调用toString）</p></li><li><p>使用toString(num)</p><p>可以将除了null和undefined以外的所有数据转为字符串 num可以指定进制数的转换（2、8、10、16）</p></li></ul><h4 id="转为number" tabindex="-1">转为Number <a class="header-anchor" href="#转为number" aria-label="Permalink to &quot;转为Number&quot;">​</a></h4><ul><li><p>使用Number() 可以转换任何类型</p><table tabindex="0"><thead><tr><th>类型</th><th>值</th><th>结果</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>1</td></tr><tr><td>Boolean</td><td>false</td><td>0</td></tr><tr><td>Number</td><td>所有数字</td><td>直接返回</td></tr><tr><td>Null</td><td>null</td><td>0</td></tr><tr><td>undefined</td><td>undefined</td><td>NaN</td></tr><tr><td>String</td><td>数值，转换为10进制</td><td></td></tr><tr><td>String</td><td>浮点数</td><td>转换相应浮点值</td></tr><tr><td>String</td><td>十六进制数</td><td>转换十进制</td></tr><tr><td>String</td><td>空字符串（&#39;&#39;）</td><td>0</td></tr><tr><td>String</td><td>其他字符串(&#39;abc&#39;)</td><td>NaN</td></tr></tbody></table></li><li><p>使用parseInt() 从第一个非空格字符开始转换，如果非数字，则返回NaN。如果是数字则继续解析直到遇到非数字字符。</p></li><li><p>使用parseFloat() 与parseInt类似，但是遇到第一个小数点不会暂停。</p></li></ul><h3 id="隐式转换" tabindex="-1">隐式转换 <a class="header-anchor" href="#隐式转换" aria-label="Permalink to &quot;隐式转换&quot;">​</a></h3><p>隐式转换由JS自动完成。</p><h4 id="引用类型转换" tabindex="-1">引用类型转换 <a class="header-anchor" href="#引用类型转换" aria-label="Permalink to &quot;引用类型转换&quot;">​</a></h4><p>JS内部会调用——toPrimitive(input, preferredType)方法</p><ul><li><p>如果PreferredType为Number</p><ol><li>如果输入的是原始值，直接返回</li><li>如果输入的值是一个对象，调用该对象的valueOf()方法，如果ValueOf()返回的是一个原始值，则返回。</li><li>否则，调用toString()方法，如果toString()返回的是一个原始值，则返回。</li><li>否则，抛出TypeError异常。</li></ol></li><li><p>如果PreferredType为String</p><ol><li>如果输入的是原始值，直接返回</li><li>如果输入的值是一个对象，调用该对象的toString()方法，如果toString()返回的是一个原始值，则返回。</li><li>否则，调用valueOf()方法，如果valueOf()返回的是一个原始值，则返回。</li><li>否则，抛出TypeError异常。</li></ol><p><strong>如果未指定preferred，有以下两种情况</strong></p><ol><li>input为Date类型，preferred为String</li><li>其余的为Number</li></ol></li></ul><h4 id="运算符隐式转换" tabindex="-1">== 运算符隐式转换 <a class="header-anchor" href="#运算符隐式转换" aria-label="Permalink to &quot;== 运算符隐式转换&quot;">​</a></h4><ul><li>Number和String转为Number进行比较</li><li>Boolean转换为Number进行比较</li><li>Object和String或Number比较时，将其转为原始类型后再比较。</li></ul>',35)]))}const p=e(d,[["render",r]]);export{b as __pageData,p as default};
